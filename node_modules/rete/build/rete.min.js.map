{"version":3,"file":"rete.min.js","sources":["../src/engine/component.ts","../src/node.ts","../src/component.ts","../src/connection.ts","../src/control.ts","../src/core/emitter.ts","../src/io.ts","../src/input.ts","../src/core/validator.ts","../src/core/context.ts","../src/view/utils.ts","../src/view/drag.ts","../src/view/zoom.ts","../src/view/area.ts","../src/view/connection.ts","../src/view/control.ts","../src/view/socket.ts","../src/view/node.ts","../src/view/index.ts","../src/selected.ts","../src/core/events.ts","../src/events.ts","../src/editor.ts","../src/output.ts","../src/socket.ts","../src/engine/recursion.ts","../src/engine/state.ts","../src/engine/events.ts","../src/engine/index.ts","../src/index.ts"],"sourcesContent":["import { Engine } from './index';\nimport { NodeData, WorkerInputs, WorkerOutputs } from '../core/data';\n\nexport abstract class Component {\n\n    name: string;\n    data: unknown = {};\n    engine: Engine | null = null;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    abstract worker(node: NodeData, inputs: WorkerInputs, outputs: WorkerOutputs, ...args: unknown[]): void;\n}","import { Connection } from './connection';\nimport { Control } from './control';\nimport { Input } from './input';\nimport { Output } from './output';\nimport { InputsData, NodeData, OutputsData } from './core/data';\n\nexport class Node {\n\n    name: string;\n    id: number;\n    position: [number, number] = [0.0, 0.0];\n    inputs = new Map<string, Input>();\n    outputs = new Map<string, Output>();\n    controls = new Map<string, Control>();\n    data: {[key: string]: unknown} = {};\n    meta: {[key: string]: unknown} = {};\n\n    static latestId = 0;\n\n    constructor(name: string) {\n        this.name = name;\n        this.id = Node.incrementId();\n    }\n\n    _add<T extends { key: string } & Record<string, any>>(list: Map<string, T>, item: T, prop: string) {\n        if (list.has(item.key))\n            throw new Error(`Item with key '${item.key}' already been added to the node`);\n        if (item[prop] !== null)\n            throw new Error('Item has already been added to some node');\n\n        (item as Record<string, Node>)[prop] = this;\n        list.set(item.key, item);\n    }\n\n    addControl(control: Control) {\n        this._add(this.controls, control, 'parent');\n        return this;\n    }\n\n    removeControl(control: Control) {\n        control.parent = null;\n\n        this.controls.delete(control.key);\n    }\n\n    addInput(input: Input) {\n        this._add(this.inputs, input, 'node');\n        return this;\n    }\n\n    removeInput(input: Input) {\n        input.removeConnections();\n        input.node = null;\n\n        this.inputs.delete(input.key);\n    }\n\n    addOutput(output: Output) {\n        this._add(this.outputs, output, 'node');\n        return this;\n    }\n\n    removeOutput(output: Output) {\n        output.removeConnections();\n        output.node = null;\n\n        this.outputs.delete(output.key);\n    }\n\n    setMeta (meta: {[key: string]: unknown}) {\n        this.meta = meta;\n        return this;\n    }\n\n    getConnections() {\n        const ios = [...this.inputs.values(), ...this.outputs.values()];\n        const connections = ios.reduce((arr, io) => {\n            return [...arr, ...io.connections];\n        }, [] as Connection[]);\n\n        return connections;\n    }\n\n    update() {}\n\n    static incrementId() {\n        if (!this.latestId)\n            this.latestId = 1\n        else\n            this.latestId++\n        return this.latestId\n    }\n\n    static resetId() {\n        this.latestId = 0;\n    }\n\n    toJSON(): NodeData {\n        const reduceIO = <T extends Record<string, any>>(list: Map<string, Input | Output>) => {\n            return Array.from(list).reduce<T>((obj, [key, io]) => {\n                (obj as Record<string, any>)[key] = io.toJSON();\n                return obj;\n            }, {} as any)\n        }\n\n        return {\n            'id': this.id,\n            'data': this.data,\n            'inputs': reduceIO<InputsData>(this.inputs),\n            'outputs': reduceIO<OutputsData>(this.outputs),\n            'position': this.position,\n            'name': this.name\n        }\n    }\n\n    static fromJSON(json: NodeData) {\n        const node = new Node(json.name);\n        const [x, y] = json.position;\n\n        node.id = json.id;\n        node.data = json.data;\n        node.position = [x, y];\n        node.name = json.name;\n        Node.latestId = Math.max(node.id, Node.latestId);\n\n        return node;\n    }\n}\n","import { Component as ComponentWorker } from './engine/component';\nimport { Node } from './node';\nimport { NodeEditor } from './editor';\n\nexport abstract class Component extends ComponentWorker {\n\n    editor: NodeEditor | null = null;\n    data: unknown = {};\n\n    constructor(name: string) {\n        super(name);\n    }\n\n    abstract builder(node: Node): Promise<void>;\n\n    async build(node: Node) {\n        await this.builder(node);\n\n        return node;\n    }\n\n    async createNode(data = {}) {\n        const node = new Node(this.name);\n\n        node.data = data;\n        await this.build(node);\n\n        return node;\n    }\n}\n","import { Input } from './input';\nimport { Output } from './output';\n\nexport class Connection {\n\n    output: Output;\n    input: Input;\n    data: unknown = {};\n\n    constructor(output: Output, input: Input) {\n        this.output = output;\n        this.input = input;\n        this.data = {};\n\n        this.input.addConnection(this);\n    }\n\n    remove() {\n        this.input.removeConnection(this);\n        this.output.removeConnection(this);\n    }\n}","import { Input } from './input';\nimport { Node } from './node';\n\nexport class Control {\n\n    key: string;\n    data: unknown = {};\n    parent: Node | Input | null = null;\n\n    constructor(key: string) {\n        if (this.constructor === Control)\n            throw new TypeError('Can not construct abstract class');\n        if (!key)\n            throw new Error('The key parameter is missing in super() of Control ');\n\n        this.key = key;\n    }\n\n    getNode() {\n        if (this.parent === null)\n            throw new Error('Control isn\\'t added to Node/Input');   \n        \n        if (this.parent instanceof Node)\n            return this.parent;\n            \n        if (!this.parent.node)\n            throw new Error('Control hasn\\'t be added to Input or Node');\n\n        return this.parent.node;\n    }\n\n    getData(key: string) {\n        return this.getNode().data[key];\n    }\n\n    putData(key: string, data: unknown) {\n        this.getNode().data[key] = data;\n    }  \n}","import { Events } from './events';\n\nexport class Emitter<EventTypes> {\n\n    events: {[key: string]: Function[]} = {};\n    silent = false;\n\n    constructor(events: Events | Emitter<EventTypes>) {\n        this.events = events instanceof Emitter ? events.events : events.handlers;\n    }\n\n    on<K extends keyof EventTypes>(names: K | K[], handler: (args: EventTypes[K]) => void | unknown): this {\n        const events = names instanceof Array ? names : (names as string).split(' ');\n\n        (events as string[]).forEach(name => {\n            if (!this.events[name])\n                throw new Error(`The event ${name} does not exist`);\n            this.events[name].push(handler);\n        });\n\n        return this;\n    }\n\n    trigger<K extends keyof EventTypes>(name: K, params: EventTypes[K] | {} = {}) {\n        if (!(name in this.events))\n            throw new Error(`The event ${String(name)} cannot be triggered`);\n\n        return this.events[name as string].reduce((r: boolean, e: Function) => {\n            return (e(params) !== false) && r\n        }, true); // return false if at least one event is false\n    }\n\n    bind(name: string) {\n        if (this.events[name])\n            throw new Error(`The event ${name} is already bound`);\n\n        this.events[name] = [];\n    }\n\n    exist(name: string) {\n        return Array.isArray(this.events[name]);\n    }\n}\n","import { Connection } from './connection';\nimport { Node } from './node';\nimport { Socket } from './socket';\n\nexport class IO {\n\n    node: Node | null = null;\n    multipleConnections: boolean;\n    connections: Connection[] = [];\n   \n    key: string;\n    name: string;\n    socket: Socket;\n\n    constructor(key: string, name: string, socket: Socket, multiConns: boolean) {\n\t    this.node = null;\n        this.multipleConnections = multiConns;\n        this.connections = [];\n\t   \n        this.key = key;\n        this.name = name;\n        this.socket = socket;\n    }\n    \n    removeConnection(connection: Connection) {\n        this.connections.splice(this.connections.indexOf(connection), 1);\n    }\n\n    removeConnections() {\n        this.connections.forEach(connection => this.removeConnection(connection));\n    }\n}","import { Connection } from './connection';\nimport { Control } from './control';\nimport { IO } from './io';\nimport { InputData } from './core/data';\nimport { Socket } from './socket';\n\nexport class Input extends IO {\n\n    control: Control | null = null;\n\n    constructor(key: string, title: string, socket: Socket, multiConns = false) {\n        super(key, title, socket, multiConns);\n    }\n\n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    addConnection(connection: Connection) {\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Multiple connections not allowed');\n        this.connections.push(connection);\n    }\n\n    addControl(control: Control) {\n        this.control = control;\n        control.parent = this;\n    }\n\n    showControl() {\n        return !this.hasConnection() && this.control !== null;\n    }\n\n    toJSON(): InputData {\n        return {\n            'connections': this.connections.map(c => {\n                if (!c.output.node) throw new Error('Node not added to Output');\n\n                return {\n                    node: c.output.node.id,\n                    output: c.output.key,\n                    data: c.data\n                };\n            })\n        };\n    }\n}\n","import { Data } from './data';\n\nexport class Validator {\n\n    static isValidData(data: Data) {\n        return typeof data.id === 'string' &&\n            this.isValidId(data.id) &&\n            data.nodes instanceof Object && !(data.nodes instanceof Array);\n    }\n\n    static isValidId(id: string) {\n        return /^[\\w-]{3,}@[0-9]+\\.[0-9]+\\.[0-9]+$/.test(id);\n    }\n\n    static validate(id: string, data: Data) {\n        const id1 = id.split('@');\n        const id2 = data.id.split('@');\n        const msg = [];\n\n        if (!this.isValidData(data))\n            msg.push('Data is not suitable');\n        if (id !== data.id)\n            msg.push('IDs not equal');\n        if (id1[0] !== id2[0])\n            msg.push('Names don\\'t match');\n        if (id1[1] !== id2[1])\n            msg.push('Versions don\\'t match');\n\n        return { success: Boolean(!msg.length), msg: msg.join('. ') };\n    }\n}\n","import { Component } from '../engine/component';\nimport { Emitter } from './emitter'\nimport { Validator } from './validator'\nimport { EventsTypes as DefaultEvents, Events } from './events';\nimport { Plugin, PluginParams } from './plugin';\n\nexport class Context<EventsTypes> extends Emitter<EventsTypes & DefaultEvents> {\n\n    id: string;\n    plugins: Map<string, unknown>;\n    components: Map<string, Component>;\n\n    constructor(id: string, events: Events) {\n        super(events);\n\n        if (!Validator.isValidId(id))\n            throw new Error('ID should be valid to name@0.1.0 format');  \n        \n        this.id = id;\n        this.plugins = new Map();\n        this.components = new Map();\n    }\n\n    use<T extends Plugin, O extends PluginParams<T>>(plugin: T, options?: O) {\n        if (plugin.name && this.plugins.has(plugin.name)) throw new Error(`Plugin ${plugin.name} already in use`)\n\n        plugin.install(this, options || {});\n        this.plugins.set(plugin.name, options)\n    }\n\n    register(component: Component) {\n        if (this.components.has(component.name))\n            throw new Error(`Component ${component.name} already registered`);\n\n        this.components.set(component.name, component);\n        this.trigger('componentregister', component);\n    }\n\n    destroy() {\n        this.trigger('destroy');\n    }\n}","export function listenWindow<K extends keyof WindowEventMap>(event: K, handler: (e: WindowEventMap[K]) => void) {\n    window.addEventListener(event, handler);\n\n    return () => {\n        window.removeEventListener<K>(event, handler);\n    }\n}\n\n\nexport function getOffset(el: HTMLElement, offsetParentEl: HTMLElement, searchDepth = 8) {\n    let x = el.offsetLeft;\n    let y = el.offsetTop;\n    let parent = el.offsetParent as HTMLElement | null;\n\n    while (parent && parent !== offsetParentEl && searchDepth > 0) {\n        searchDepth--;\n        x += parent.offsetLeft;\n        y += parent.offsetTop;\n        parent = parent.offsetParent as HTMLElement | null;\n    }\n\n    return { x, y };\n}","import { listenWindow } from './utils';\n\nexport class Drag {\n\n    pointerStart: [number, number] | null;\n    el: HTMLElement;\n    destroy: () => void;\n\n    constructor(\n        el: HTMLElement,\n        private onTranslate = (_x: number, _y: number, _e: PointerEvent) => {},\n        private onStart = (_e: PointerEvent) => {},\n        private onDrag = (_e: PointerEvent) => {}\n    ) {\n        this.pointerStart = null;\n        this.el = el;\n\n        this.el.style.touchAction = 'none';\n        this.el.addEventListener('pointerdown', this.down.bind(this));\n\n        const destroyMove = listenWindow('pointermove', this.move.bind(this));\n        const destroyUp = listenWindow('pointerup', this.up.bind(this));\n\n        this.destroy = () => { destroyMove(); destroyUp(); }\n    }\n\n    down(e: PointerEvent) {\n        if ((e.pointerType === 'mouse') && (e.button !== 0)) return;\n        e.stopPropagation();\n        this.pointerStart = [e.pageX, e.pageY]\n\n        this.onStart(e);\n    }\n\n    move(e: PointerEvent) {\n        if (!this.pointerStart) return;\n        e.preventDefault();\n\n        const [x, y] = [e.pageX, e.pageY]\n\n        const delta = [x - this.pointerStart[0], y - this.pointerStart[1]];\n\n        const zoom = this.el.getBoundingClientRect().width / this.el.offsetWidth;\n\n        this.onTranslate(delta[0] / zoom, delta[1] / zoom, e);\n    }\n\n    up(e: PointerEvent) {\n        if (!this.pointerStart) return;\n\n        this.pointerStart = null;\n        this.onDrag(e);\n    }\n}\n","import { listenWindow } from './utils';\n\nexport class Zoom {\n\n    el: HTMLElement;\n    intensity: number;\n    onzoom: Function;\n    previous: { cx: number; cy: number; distance: number } | null = null;\n\n    pointers: PointerEvent[] = [];\n    destroy: () => void;\n\n    constructor(container: HTMLElement, el: HTMLElement, intensity: number, onzoom: Function) {\n        this.el = el;\n        this.intensity = intensity;\n        this.onzoom = onzoom;\n\n        container.addEventListener('wheel', this.wheel.bind(this));\n        container.addEventListener('pointerdown', this.down.bind(this));\n        container.addEventListener('dblclick', this.dblclick.bind(this));\n\n        const destroyMove = listenWindow('pointermove', this.move.bind(this));\n        const destroyUp = listenWindow('pointerup', this.end.bind(this));\n        const destroyCancel = listenWindow('pointercancel', this.end.bind(this));\n\n        this.destroy = () => { destroyMove(); destroyUp(); destroyCancel(); }\n    }\n\n    get translating() { // is translating while zoom (works on multitouch)\n        return this.pointers.length >= 2;\n    }\n\n    wheel(e: WheelEvent) {\n        e.preventDefault();\n\n        const rect = this.el.getBoundingClientRect();\n        const isNegative = e.deltaY < 0;\n        const delta = isNegative ? this.intensity : - this.intensity;\n        const ox = (rect.left - e.clientX) * delta;\n        const oy = (rect.top - e.clientY) * delta;\n\n        this.onzoom(delta, ox, oy, 'wheel');\n    }\n\n    touches() {\n        const e = { touches: this.pointers }\n        const [x1, y1] = [e.touches[0].clientX, e.touches[0].clientY];\n        const [x2, y2] = [e.touches[1].clientX, e.touches[1].clientY];\n\n        const distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n\n        return {\n            cx: (x1 + x2)/2,\n            cy: (y1 + y2)/2,\n            distance\n        };\n    }\n\n    down(e: PointerEvent) {\n        this.pointers.push(e);\n    }\n\n    move(e: PointerEvent) {\n        this.pointers = this.pointers.map(p => p.pointerId === e.pointerId ? e : p)\n        if (!this.translating) return;\n\n        const rect = this.el.getBoundingClientRect();\n\n        const { cx, cy, distance } = this.touches();\n\n        if (this.previous !== null) {\n            const delta = distance / this.previous.distance - 1;\n\n            const ox = (rect.left - cx) * delta;\n            const oy = (rect.top - cy) * delta;\n\n            this.onzoom(delta, ox - (this.previous.cx - cx), oy - (this.previous.cy - cy), 'touch');\n        }\n        this.previous = { cx, cy, distance };\n    }\n\n    end(e: PointerEvent) {\n        this.previous = null;\n        this.pointers = this.pointers.filter(p => p.pointerId !== e.pointerId)\n    }\n\n    dblclick(e: MouseEvent) {\n        e.preventDefault();\n\n        const rect = this.el.getBoundingClientRect();\n        const delta = 4 * this.intensity;\n\n        const ox = (rect.left - e.clientX) * delta;\n        const oy = (rect.top - e.clientY) * delta;\n\n        this.onzoom(delta, ox, oy, 'dblclick');\n    }\n}\n","import { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { Zoom } from './zoom';\n\nexport interface Transform { k: number; x: number; y: number }\nexport interface Mouse { x: number; y: number }\nexport type ZoomSource = 'wheel' | 'touch' | 'dblclick';\n\nexport class Area extends Emitter<EventsTypes> {\n\n    el: HTMLElement;\n    container: HTMLElement;\n    transform: Transform = { k: 1, x: 0, y: 0 };\n    mouse: Mouse = { x: 0, y: 0 }\n    \n    private _startPosition: Transform | null = null\n    private _zoom: Zoom;\n    private _drag: Drag;\n\n    constructor(container: HTMLElement, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        \n        const el = this.el = document.createElement('div');\n\n        this.container = container;\n        el.style.transformOrigin = '0 0';\n\n        this._zoom = new Zoom(container, el, 0.1, this.onZoom.bind(this));\n        this._drag = new Drag(container, this.onTranslate.bind(this), this.onStart.bind(this));\n\n        emitter.on('destroy', () => {\n            this._zoom.destroy();\n            this._drag.destroy();\n        });\n\n        this.container.addEventListener('pointermove', this.pointermove.bind(this));\n\n        this.update();\n    }\n\n    update() {\n        const t = this.transform;\n\n        this.el.style.transform = `translate(${t.x}px, ${t.y}px) scale(${t.k})`;\n    }\n\n    pointermove(e: PointerEvent) {\n        const { clientX, clientY } = e;\n        const rect = this.el.getBoundingClientRect();\n        const x = clientX - rect.left;\n        const y = clientY - rect.top;\n        const k = this.transform.k;\n        \n        this.mouse = { x: x / k, y: y / k };\n        this.trigger('mousemove', { ...this.mouse }); // TODO rename on `pointermove`\n    }\n\n    onStart() {\n        this._startPosition = { ...this.transform };\n    }\n\n    onTranslate(dx: number, dy: number) {\n        if (this._zoom.translating) return; // lock translation while zoom on multitouch\n        if (this._startPosition) this.translate(this._startPosition.x + dx, this._startPosition.y + dy);\n    }\n\n    onZoom(delta: number, ox: number, oy: number, source: ZoomSource) {\n        this.zoom(this.transform.k * (1 + delta), ox, oy, source);\n\n        this.update();\n    }\n\n    translate(x: number, y: number) {\n        const params = { transform: this.transform, x, y };\n\n        if (!this.trigger('translate', params)) return;\n\n        this.transform.x = params.x;\n        this.transform.y = params.y;\n\n        this.update();\n        this.trigger('translated');\n    }\n\n    zoom(zoom: number, ox = 0, oy = 0, source: ZoomSource) {\n        const k = this.transform.k;\n        const params = { transform: this.transform, zoom, source };\n\n        if (!this.trigger('zoom', params)) return;\n        \n        const d = (k - params.zoom) / ((k - zoom) || 1);\n\n        this.transform.k = params.zoom || 1;\n        this.transform.x += ox * d;\n        this.transform.y += oy * d;\n\n        this.update();\n        this.trigger('zoomed', { source });\n    }\n\n    appendChild(el: HTMLElement) {\n        this.el.appendChild(el)\n    }\n\n    removeChild(el: HTMLElement) {\n        this.el.removeChild(el)\n    }\n}","import { Connection } from '../connection';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { NodeView } from './node';\n\nexport class ConnectionView extends Emitter<EventsTypes> {\n\n    connection: Connection;\n    inputNode: NodeView;\n    outputNode: NodeView;\n    el: HTMLElement;\n\n    constructor(connection: Connection, inputNode: NodeView, outputNode: NodeView, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.connection = connection;\n        this.inputNode = inputNode;\n        this.outputNode = outputNode;\n\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n        this.el.style.zIndex = '-1';\n\n        this.trigger('renderconnection', {\n            el: this.el,\n            connection: this.connection,\n            points: this.getPoints()\n        });\n    }\n\n    getPoints() {\n        const { input, output } = this.connection\n\n        if (this.inputNode.hasSocket(input) && this.outputNode.hasSocket(output)) {\n            const [x1, y1] = this.outputNode.getSocketPosition(output);\n            const [x2, y2] = this.inputNode.getSocketPosition(input);\n\n            return [x1, y1, x2, y2];\n        }\n\n        return [0, 0, 0, 0]\n    }\n\n    update() {\n        this.trigger('updateconnection', {\n            el: this.el,\n            connection: this.connection,\n            points: this.getPoints()\n        });\n    }\n}\n","import { Control } from '../control';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\n\nexport class ControlView extends Emitter<EventsTypes> {\n\n    constructor(el: HTMLElement, control: Control, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.trigger('rendercontrol', { el, control });\n    }\n}","import { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { IO } from '../io';\nimport { Node } from '../node';\nimport { getOffset } from './utils';\n\nexport class SocketView extends Emitter<EventsTypes> {\n\n    el: HTMLElement;\n    type: string;\n    io: IO;\n    node: Node;\n\n    constructor(el: HTMLElement, type: string, io: IO, node: Node, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.el = el;\n        this.type = type;\n        this.io = io;\n        this.node = node;\n\n        this.trigger('rendersocket', { el, [type]: this.io, socket: io.socket });\n    }\n\n    getPosition({ position }: { position: number[] }, nodeViewEl: HTMLElement): [number, number] {\n        const { el } = this;\n        const { x, y } = getOffset(el, nodeViewEl);\n\n        return [position[0] + x + el.offsetWidth / 2, position[1] + y + el.offsetHeight / 2];\n    }\n}","import { Component } from '../engine/component';\nimport { Control } from '../control';\nimport { ControlView } from './control';\nimport { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { IO } from '../io';\nimport { Node } from '../node';\nimport { SocketView } from './socket';\n\nexport class NodeView extends Emitter<EventsTypes> {\n\n    node: Node;\n    component: Component;\n    sockets = new Map<IO, SocketView>();\n    controls = new Map<Control, ControlView>();\n\n    el: HTMLElement;\n    private _startPosition: number[] = [];\n    private _drag: Drag;\n\n    constructor(node: Node, component: Component, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n\n        this.node = node;\n        this.component = component;\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n\n        this.el.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, node: this.node }));\n\n        this._drag = new Drag(this.el, this.onTranslate.bind(this), this.onSelect.bind(this), () => {\n            this.trigger('nodedraged', node);\n            this.trigger('nodedragged', node);\n        });\n\n        this.trigger('rendernode', {\n            el: this.el,\n            node,\n            component: component.data,\n            bindSocket: this.bindSocket.bind(this),\n            bindControl: this.bindControl.bind(this)\n        });\n\n        this.update();\n    }\n\n    clearSockets() {\n        const ios: IO[] = [ ...this.node.inputs.values(), ...this.node.outputs.values()];\n\n        this.sockets.forEach(s => {\n            if (!ios.includes(s.io)) this.sockets.delete(s.io);\n        });\n    }\n\n    bindSocket(el: HTMLElement, type: string, io: IO) {\n        this.clearSockets();\n        this.sockets.set(io, new SocketView(el, type, io, this.node, this));\n    }\n\n    bindControl(el: HTMLElement, control: Control) {\n        this.controls.set(control, new ControlView(el, control, this));\n    }\n\n    hasSocket(io: IO) {\n        return this.sockets.has(io)\n    }\n\n    getSocketPosition(io: IO) {\n        const socket = this.sockets.get(io);\n\n        if (!socket) throw new Error(`Socket not found for ${io.name} with key ${io.key}`);\n\n        return socket.getPosition(this.node, this.el);\n    }\n\n    onSelect(e: MouseEvent) {\n        const payload = { node: this.node, accumulate: e.ctrlKey, e };\n\n        this.onStart();\n        this.trigger('multiselectnode', payload);\n        this.trigger('selectnode', payload);\n    }\n\n    onStart() {\n        this._startPosition = [...this.node.position];\n    }\n\n    onTranslate(dx: number, dy: number) {\n        this.trigger('translatenode', { node: this.node, dx, dy });\n    }\n\n    onDrag(dx: number, dy: number) {\n        const x = this._startPosition[0] + dx;\n        const y = this._startPosition[1] + dy;\n\n        this.translate(x, y);\n    }\n\n    translate(x: number, y: number) {\n        const node = this.node;\n        const params = { node, x, y };\n\n        if (!this.trigger('nodetranslate', params)) return;\n\n        const [px, py] = node.position;\n        const prev: [number, number] = [px, py];\n\n        node.position[0] = params.x;\n        node.position[1] = params.y;\n\n        this.update();\n        this.trigger('nodetranslated', { node, prev });\n    }\n\n    update() {\n        const [x, y] = this.node.position;\n\n        this.el.style.transform = `translate(${x}px, ${y}px)`;\n    }\n\n    remove() {\n\n    }\n\n    destroy() {\n        this._drag.destroy();\n    }\n}\n","import { Area } from './area';\nimport { Component } from '../engine/component';\nimport { Connection } from '../connection';\nimport { ConnectionView } from './connection';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { Node } from '../node';\nimport { NodeView } from './node';\nimport { listenWindow } from './utils';\n\nexport class EditorView extends Emitter<EventsTypes> {\n\n    container: HTMLElement;\n    components: Map<string, Component>;\n    nodes = new Map<Node, NodeView>();\n    connections = new Map<Connection, ConnectionView>();\n    area: Area;\n\n    // eslint-disable-next-line max-statements\n    constructor(container: HTMLElement, components: Map<string, Component>, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n\n        this.container = container;\n        this.components = components;\n\n        this.container.style.overflow = 'hidden';\n\n        this.container.addEventListener('click', this.click.bind(this));\n        this.container.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, view: this }));\n        emitter.on('destroy', listenWindow('resize', this.resize.bind(this)));\n        emitter.on('destroy', () => this.nodes.forEach(view => view.destroy()));\n\n        this.on('nodetranslated', this.updateConnections.bind(this));\n        this.on('rendersocket', ({ input, output }) => {\n            const connections = Array.from(this.connections.entries())\n            const relatedConnections = connections.filter(([connection]) => {\n                return connection.input === input || connection.output === output\n            })\n\n            relatedConnections.forEach(([_, view]) => requestAnimationFrame(() => view.update()))\n        })\n\n        this.area = new Area(container, this);\n        this.container.appendChild(this.area.el);\n    }\n\n    addNode(node: Node) {\n        const component = this.components.get(node.name);\n\n        if (!component) throw new Error(`Component ${node.name} not found`);\n\n        const nodeView = new NodeView(node, component, this);\n\n        this.nodes.set(node, nodeView);\n        this.area.appendChild(nodeView.el);\n    }\n\n    removeNode(node: Node) {\n        const nodeView = this.nodes.get(node);\n\n        this.nodes.delete(node);\n        if (nodeView) {\n            this.area.removeChild(nodeView.el);\n            nodeView.destroy();\n        }\n    }\n\n    addConnection(connection: Connection) {\n        if (!connection.input.node || !connection.output.node)\n            throw new Error('Connection input or output not added to node');\n\n        const viewInput = this.nodes.get(connection.input.node);\n        const viewOutput = this.nodes.get(connection.output.node);\n\n        if (!viewInput || !viewOutput)\n            throw new Error('View node not found for input or output');\n\n        const connView = new ConnectionView(connection, viewInput, viewOutput, this);\n\n        this.connections.set(connection, connView);\n        this.area.appendChild(connView.el);\n    }\n\n    removeConnection(connection: Connection) {\n        const connView = this.connections.get(connection);\n\n        this.connections.delete(connection);\n        if (connView)\n            this.area.removeChild(connView.el);\n    }\n\n    updateConnections({ node }: { node: Node }) {\n        node.getConnections().forEach(conn => {\n            const connView = this.connections.get(conn);\n\n            if (!connView) throw new Error('Connection view not found');\n\n            connView.update();\n        });\n    }\n\n    resize() {\n        const { container } = this;\n\n        if (!container.parentElement)\n            throw new Error('Container doesn\\'t have parent element');\n\n        const width = container.parentElement.clientWidth;\n        const height = container.parentElement.clientHeight;\n\n        container.style.width = width + 'px';\n        container.style.height = height + 'px';\n    }\n\n    click(e: Event) {\n        const container = this.container;\n\n        if (container !== e.target) return;\n        if (!this.trigger('click', { e, container })) return;\n    }\n}\n","import { Node } from './node';\n\nexport class Selected {\n\n    list: Node[] = [];\n\n    add(item: Node, accumulate = false) {\n        if (!accumulate)\n            this.list = [item]; \n        else if (!this.contains(item))\n            this.list.push(item);   \n    }\n\n    clear() {\n        this.list = [];\n    }\n\n    remove(item: Node) {\n        this.list.splice(this.list.indexOf(item), 1);\n    }\n\n    contains(item: Node) {\n        return this.list.indexOf(item) !== -1;\n    }\n\n    each(callback: (n: Node, index: number) => void) {\n        this.list.forEach(callback);\n    }\n}","import { Component } from '../engine/component';\n\nexport class Events {\n\n    handlers: {};\n\n    constructor(handlers: {}) {\n        this.handlers = {\n            warn: [console.warn],\n            error: [console.error],\n            componentregister: [],\n            destroy: [],\n            ...handlers\n        }\n    }\n}\n\nexport interface EventsTypes {\n    warn: string | Error;\n    error: string | Error;\n    componentregister: Component;\n    destroy: void;\n}","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Control } from './control';\nimport { Data } from './core/data';\nimport { EditorView } from './view';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { Output } from './output';\nimport { Socket } from './socket';\nimport { EventsTypes as DefaultEventsTypes, Events } from './core/events';\nimport { Mouse, Transform, ZoomSource } from './view/area';\n\nexport class EditorEvents extends Events {\n\n    constructor() {\n        super({\n            nodecreate: [],\n            nodecreated: [],\n            noderemove: [],\n            noderemoved: [],\n            connectioncreate: [],\n            connectioncreated: [],\n            connectionremove: [],\n            connectionremoved: [],\n            translatenode: [],\n            nodetranslate: [],\n            nodetranslated: [],\n            nodedraged: [],\n            nodedragged: [],\n            selectnode: [],\n            multiselectnode: [],\n            nodeselect: [],\n            nodeselected: [],\n            rendernode: [],\n            rendersocket: [],\n            rendercontrol: [],\n            renderconnection: [],\n            updateconnection: [],\n            keydown: [],\n            keyup: [],\n            translate: [],\n            translated: [],\n            zoom: [],\n            zoomed: [],\n            click: [],\n            mousemove: [],\n            contextmenu: [],\n            import: [],\n            export: [],\n            process: [],\n            clear: []\n        });\n    }    \n}\n\nexport interface EventsTypes extends DefaultEventsTypes {\n    componentregister: Component;\n    nodecreate: Node;\n    nodecreated: Node;\n    noderemove: Node;\n    noderemoved: Node;\n    connectioncreate: { input: Input; output: Output };\n    connectioncreated: Connection;\n    connectionremove: Connection;\n    connectionremoved: Connection;\n    translatenode: { node: Node; dx: number; dy: number };\n    nodetranslate: { node: Node; x: number; y: number };\n    nodetranslated: { node: Node; prev: [number, number] };\n    nodedraged: Node;\n    nodedragged: Node;\n    selectnode: {\n        node: Node;\n        accumulate: boolean;\n    };\n    multiselectnode: {\n        node: Node;\n        accumulate: boolean;\n        e: MouseEvent;\n    };\n    nodeselect: Node;\n    nodeselected: Node;\n    rendernode: {\n        el: HTMLElement;\n        node: Node;\n        component: object;\n        bindSocket: Function;\n        bindControl: Function;\n    };\n    rendersocket: {\n        el: HTMLElement;\n        input?: Input;\n        output?: Output;\n        socket: Socket;\n    };\n    rendercontrol: {\n        el: HTMLElement;\n        control: Control;\n    };\n    renderconnection: {\n        el: HTMLElement;\n        connection: Connection;\n        points: number[];\n    };\n    updateconnection: {\n        el: HTMLElement;\n        connection: Connection;\n        points: number[];\n    };\n    keydown: KeyboardEvent;\n    keyup: KeyboardEvent;\n    translate: {\n        transform: Transform;\n        x: number;\n        y: number;\n    };\n    translated: void;\n    zoom: {\n        transform: Transform;\n        zoom: number;\n        source: ZoomSource;\n    };\n    zoomed: {\n        source: ZoomSource;\n    };\n    click: {\n        e: Event;\n        container: HTMLElement;\n    };\n    mousemove: Mouse;\n    contextmenu: {\n        e: MouseEvent;\n        view?: EditorView;\n        node?: Node;\n    };\n    import: Data;\n    export: Data;\n    process: void;\n    clear: void;\n}\n","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Context } from './core/context';\nimport { Data } from './core/data';\nimport { EditorView } from './view/index';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { Output } from './output';\nimport { Selected } from './selected';\nimport { Validator } from './core/validator';\nimport { listenWindow } from './view/utils';\nimport { EditorEvents, EventsTypes } from './events';\n\nexport class NodeEditor extends Context<EventsTypes> {\n\n    nodes: Node[] = [];\n    selected = new Selected();\n    view: EditorView;\n\n    constructor(id: string, container: HTMLElement) {\n        super(id, new EditorEvents());\n\n        this.view = new EditorView(container, this.components, this);\n\n        this.on('destroy', listenWindow('keydown', e => this.trigger('keydown', e)));\n        this.on('destroy', listenWindow('keyup', e => this.trigger('keyup', e)));\n\n        this.on('selectnode', ({ node, accumulate }) => this.selectNode(node, accumulate));\n        this.on('nodeselected', () => this.selected.each(n => {\n            const nodeView = this.view.nodes.get(n);\n\n            nodeView && nodeView.onStart()\n        }));\n        this.on('translatenode', ({ dx, dy }) => this.selected.each(n => {\n            const nodeView = this.view.nodes.get(n);\n\n            nodeView && nodeView.onDrag(dx, dy)\n        }));\n    }\n\n    addNode(node: Node) {\n        if (!this.trigger('nodecreate', node)) return;\n\n        this.nodes.push(node);\n        this.view.addNode(node);\n\n        this.trigger('nodecreated', node);\n    }\n\n    removeNode(node: Node) {\n        if (!this.trigger('noderemove', node)) return;\n\n        node.getConnections().forEach(c => this.removeConnection(c));\n\n        this.nodes.splice(this.nodes.indexOf(node), 1);\n        this.view.removeNode(node);\n\n        this.trigger('noderemoved', node);\n    }\n\n    connect(output: Output, input: Input, data: unknown = {}) {\n        if (!this.trigger('connectioncreate', { output, input })) return;\n\n        try {\n            const connection = output.connectTo(input);\n\n            connection.data = data;\n            this.view.addConnection(connection);\n\n            this.trigger('connectioncreated', connection);\n        } catch (e) {\n            this.trigger('warn', e as Error)\n        }\n    }\n\n    removeConnection(connection: Connection) {\n        if (!this.trigger('connectionremove', connection)) return;\n\n        this.view.removeConnection(connection);\n        connection.remove();\n\n        this.trigger('connectionremoved', connection);\n    }\n\n    selectNode(node: Node, accumulate = false) {\n        if (this.nodes.indexOf(node) === -1)\n            throw new Error('Node not exist in list');\n\n        if (!this.trigger('nodeselect', node)) return;\n\n        this.selected.add(node, accumulate);\n\n        this.trigger('nodeselected', node);\n    }\n\n    getComponent(name: string) {\n        const component = this.components.get(name);\n\n        if (!component)\n            throw `Component ${name} not found`;\n\n        return component as Component;\n    }\n\n    register(component: Component) {\n        super.register(component)\n        component.editor = this;\n    }\n\n    clear() {\n        [...this.nodes].forEach(node => this.removeNode(node));\n        this.trigger('clear');\n    }\n\n    toJSON() {\n        const data: Data = { id: this.id, nodes: {} };\n\n        this.nodes.forEach(node => data.nodes[node.id] = node.toJSON());\n        this.trigger('export', data);\n        return data;\n    }\n\n    beforeImport(json: Data) {\n        const checking = Validator.validate(this.id, json);\n\n        if (!checking.success) {\n            this.trigger('warn', checking.msg);\n            return false;\n        }\n\n        this.silent = true;\n        this.clear();\n        this.trigger('import', json);\n        return true;\n    }\n\n    afterImport() {\n        this.silent = false;\n        return true;\n    }\n\n    async fromJSON(json: Data) {\n        if (!this.beforeImport(json)) return false;\n        const nodes: {[key: string]: Node} = {};\n\n        try {\n            await Promise.all(Object.keys(json.nodes).map(async id => {\n                const node = json.nodes[id];\n                const component = this.getComponent(node.name);\n\n                nodes[id] = await component.build(Node.fromJSON(node));\n                this.addNode(nodes[id]);\n            }));\n\n            Object.keys(json.nodes).forEach(id => {\n                const jsonNode = json.nodes[id];\n                const node = nodes[id];\n\n                Object.keys(jsonNode.outputs).forEach(key => {\n                    const outputJson = jsonNode.outputs[key];\n\n                    outputJson.connections.forEach(jsonConnection => {\n                        const nodeId = jsonConnection.node;\n                        const data = jsonConnection.data;\n                        const targetOutput = node.outputs.get(key);\n                        const targetInput = nodes[nodeId].inputs.get(jsonConnection.input);\n\n                        if (!targetOutput || !targetInput) {\n                            return this.trigger('error', `IO not found for node ${node.id}`);\n                        }\n\n                        this.connect(targetOutput, targetInput, data);\n                    });\n                });\n\n            });\n        } catch (e) {\n            this.trigger('warn', e as Error);\n            return !this.afterImport();\n        }\n\n        return this.afterImport();\n    }\n}\n","import { Connection } from './connection';\nimport { IO } from './io';\nimport { Input } from './input';\nimport { OutputData } from './core/data';\nimport { Socket } from './socket';\n\nexport class Output extends IO {\n\n    constructor(key: string, title: string, socket: Socket, multiConns = true) {\n        super(key, title, socket, multiConns);\n    }\n\n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    connectTo(input: Input) {\n        if (!this.socket.compatibleWith(input.socket))\n            throw new Error('Sockets not compatible');\n        if (!input.multipleConnections && input.hasConnection())\n            throw new Error('Input already has one connection');\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Output already has one connection');\n\n        const connection = new Connection(this, input);\n\n        this.connections.push(connection);\n        return connection;\n    }\n\n    connectedTo(input: Input) {\n        return this.connections.some((item) => {\n            return item.input === input;\n        });\n    }\n\n    toJSON(): OutputData {\n        return {\n            'connections': this.connections.map(c => {\n                if (!c.input.node) throw new Error('Node not added to Input');\n\n                return {\n                    node: c.input.node.id,\n                    input: c.input.key,\n                    data: c.data\n                }\n            })\n        };\n    }\n}\n","export class Socket {\n\n    name: string;\n    data: unknown;\n    compatible: Socket[] = [];\n\n    constructor(name: string, data = {}) {\n        this.name = name;\n        this.data = data;\n        this.compatible = [];\n    }\n\n    combineWith(socket: Socket) {\n        this.compatible.push(socket);\n    }\n\n    compatibleWith(socket: Socket) {\n        return this === socket || this.compatible.includes(socket);\n    }\n}","import { InputConnectionData, NodeData, NodesData } from '../core/data';\n\nfunction intersect<T>(array1: T[], array2: T[]) {\n    return array1.filter(value => -1 !== array2.indexOf(value));\n}\n\nexport class Recursion {\n\n    nodes: NodesData;\n\n    constructor(nodes: NodesData) {\n        this.nodes = nodes;\n    }\n\n    extractInputNodes(node: NodeData): NodeData[] {\n        return Object.keys(node.inputs).reduce((acc: NodeData[], key: string) => {\n            const { connections } = node.inputs[key];\n            const nodesData = (connections || []).reduce((b: NodeData[], c: InputConnectionData) => {\n                return [...b, this.nodes[c.node]];\n            }, []);\n\n            return [...acc, ...nodesData]\n        }, []);\n    }\n\n    findSelf(list: NodeData[], inputNodes: NodeData[]): NodeData | null {\n        const inters = intersect<NodeData>(list, inputNodes);\n\n        if (inters.length)\n            return inters[0];\n\n        for (const node of inputNodes) {\n            const l = [node, ...list];\n            const inter = this.findSelf(l, this.extractInputNodes(node));\n\n            if (inter)\n                return inter;\n        }\n\n        return null;\n    }\n\n    detect(): NodeData | null {\n        const nodesArr = Object.keys(this.nodes).map(id => this.nodes[id]);\n\n        for (const node of nodesArr) {\n            const inters = this.findSelf([node], this.extractInputNodes(node));\n\n            if (inters)\n                return inters;\n        }\n\n        return null;\n    }\n}\n","export const State = { AVAILABLE: 0, PROCESSED: 1, ABORT: 2 }","import { Events } from '../core/events';\n\nexport class EngineEvents extends Events {\n\n    constructor() {\n        super({});\n    }    \n}\nexport interface EventsTypes {\n}","import { Component } from './component';\nimport { Context } from '../core/context';\nimport { Recursion } from './recursion';\nimport { State } from './state';\nimport { Validator } from '../core/validator';\nimport { Data, NodeData, WorkerOutputs } from '../core/data';\nimport { EngineEvents, EventsTypes } from './events';\nexport { Component, Recursion };\n\ninterface EngineNode extends NodeData {\n    busy: boolean;\n    unlockPool: (() => void)[];\n    outputData: WorkerOutputs;\n}\n\nexport class Engine extends Context<EventsTypes> {\n\n    args: unknown[] = [];\n    data: Data | null = null;\n    state = State.AVAILABLE;\n    forwarded = new Set();\n    onAbort = () => { };\n\n    constructor(id: string) {\n        super(id, new EngineEvents());\n    }\n\n    public clone() {\n        const engine = new Engine(this.id);\n\n        this.components.forEach(c => engine.register(c));\n\n        return engine;\n    }\n\n    async throwError (message: string, data: unknown = null) {\n        await this.abort();\n        this.trigger('error', { message, data });\n        this.processDone();\n\n        return 'error';\n    }\n\n    private processStart() {\n        if (this.state === State.AVAILABLE) {\n            this.state = State.PROCESSED;\n            return true;\n        }\n\n        if (this.state === State.ABORT) {\n            return false;\n        }\n\n        console.warn(`The process is busy and has not been restarted.\n                Use abort() to force it to complete`);\n        return false;\n    }\n\n    private processDone() {\n        const success = this.state !== State.ABORT;\n\n        this.state = State.AVAILABLE;\n\n        if (!success) {\n            this.onAbort();\n            this.onAbort = () => { }\n        }\n\n        return success;\n    }\n\n    public async abort() {\n        return new Promise<void>(ret => {\n            if (this.state === State.PROCESSED) {\n                this.state = State.ABORT;\n                this.onAbort = ret;\n            }\n            else if (this.state === State.ABORT) {\n                this.onAbort();\n                this.onAbort = ret;\n            }\n            else\n                ret();\n        });\n    }\n\n    private async lock(node: EngineNode) {\n        return new Promise<void>(res => {\n            node.unlockPool = node.unlockPool || [];\n            if (node.busy && !node.outputData)\n                node.unlockPool.push(res);\n            else\n                res();\n\n            node.busy = true;\n        });\n    }\n\n    unlock(node: EngineNode) {\n        node.unlockPool.forEach(a => a());\n        node.unlockPool = [];\n        node.busy = false;\n    }\n\n    private async extractInputData(node: NodeData) {\n        const obj: {[id: string]: any} = {};\n\n        for (const key of Object.keys(node.inputs)) {\n            const input = node.inputs[key];\n            const conns = input.connections;\n            const connData = await Promise.all(conns.map(async (c) => {\n                const prevNode = (this.data as Data).nodes[c.node];\n\n                const outputs = await this.processNode(prevNode as EngineNode);\n\n                if (!outputs)\n                    this.abort();\n                else\n                    return outputs[c.output];\n            }));\n\n            obj[key] = connData;\n        }\n\n        return obj;\n    }\n\n    private async processWorker(node: NodeData) {\n        const inputData = await this.extractInputData(node);\n        const component = this.components.get(node.name) as Component;\n        const outputData = {};\n\n        try {\n            await component.worker(node, inputData, outputData, ...this.args);\n        } catch (e) {\n            this.abort();\n            this.trigger('warn', e as Error);\n        }\n\n        return outputData;\n    }\n\n    private async processNode(node: EngineNode) {\n        if (this.state === State.ABORT || !node)\n            return null;\n\n        await this.lock(node);\n\n        if (!node.outputData) {\n            node.outputData = await this.processWorker(node);\n        }\n\n        this.unlock(node);\n        return node.outputData;\n    }\n\n    private async forwardProcess(node: NodeData) {\n        if (this.state === State.ABORT)\n            return null;\n\n        return await Promise.all(Object.keys(node.outputs).map(async (key) => {\n            const output = node.outputs[key];\n            return await Promise.all(output.connections.map(async (c) => {\n                const nextNode = (this.data as Data).nodes[c.node];\n                if(!this.forwarded.has(nextNode)) {\n                    this.forwarded.add(nextNode);\n                    await this.processNode(nextNode as EngineNode);\n                    await this.forwardProcess(nextNode);\n                }\n            }));\n        }));\n    }\n\n    copy(data: Data) {\n        data = Object.assign({}, data);\n        data.nodes = Object.assign({}, data.nodes);\n\n        Object.keys(data.nodes).forEach(key => {\n            data.nodes[key] = Object.assign({}, data.nodes[key])\n        });\n        return data;\n    }\n\n    async validate(data: Data) {\n        const checking = Validator.validate(this.id, data);\n        const recursion = new Recursion(data.nodes);\n\n        if (!checking.success)\n            return await this.throwError(checking.msg);\n\n        const recurrentNode = recursion.detect();\n\n        if (recurrentNode)\n            return await this.throwError('Recursion detected', recurrentNode);\n\n        return true;\n    }\n\n    private async processStartNode(id: string | number | null) {\n        if (!id) return;\n\n        const startNode = (this.data as Data).nodes[id];\n\n        if (!startNode)\n            return await this.throwError('Node with such id not found');\n\n        await this.processNode(startNode as EngineNode);\n        await this.forwardProcess(startNode);\n    }\n\n    private async processUnreachable() {\n        const data = this.data as Data;\n\n        for (const i in data.nodes) { // process nodes that have not been reached\n            const node = data.nodes[i] as EngineNode;\n\n            if (typeof node.outputData === 'undefined') {\n                await this.processNode(node);\n                await this.forwardProcess(node);\n            }\n        }\n    }\n\n    async process<T extends unknown[]>(data: Data, startId: number | string | null = null, ...args: T) {\n        if (!this.processStart()) return;\n        if (!this.validate(data)) return;\n\n        this.data = this.copy(data);\n        this.args = args;\n        this.forwarded = new Set();\n\n        await this.processStartNode(startId);\n        await this.processUnreachable();\n\n        return this.processDone()?'success':'aborted';\n    }\n}\n","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Control } from './control';\nimport { Emitter } from './core/emitter';\nimport { IO } from './io';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { NodeEditor } from './editor';\nimport { Output } from './output';\nimport { Socket } from './socket';\nimport { Engine, Recursion } from './engine/index';\n\nexport { Engine, Recursion } from './engine/index';\nexport { Component } from './component';\nexport { Control } from './control';\nexport { Connection } from './connection';\nexport { Emitter } from './core/emitter';\nexport { Input } from './input';\nexport { IO } from './io';\nexport { Node } from './node';\nexport { NodeEditor } from './editor';\nexport { Output } from './output';\nexport { Socket } from './socket';\n\nexport default {\n    Engine,\n    Recursion,\n    Component,\n    Control,\n    Connection,\n    Emitter,\n    Input,\n    IO,\n    Node,\n    NodeEditor,\n    Output,\n    Socket\n}"],"names":["Component","name","Node","Map","id","incrementId","list","item","prop","has","key","Error","set","control","_add","controls","parent","input","inputs","removeConnections","node","output","outputs","meta","ios","values","connections","reduce","arr","io","reduceIO","Array","from","obj","toJSON","data","position","latestId","json","x","y","Math","max","builder","build","ComponentWorker","Connection","addConnection","removeConnection","Control","constructor","TypeError","getNode","Emitter","events","handlers","names","handler","split","forEach","push","params","String","r","e","isArray","IO","socket","multiConns","multipleConnections","connection","splice","indexOf","Input","title","length","hasConnection","map","c","Validator","isValidId","nodes","Object","test","id1","id2","msg","isValidData","success","Boolean","join","Context","plugins","components","plugin","options","install","component","trigger","listenWindow","event","window","addEventListener","removeEventListener","getOffset","el","offsetParentEl","searchDepth","offsetLeft","offsetTop","offsetParent","Drag","onTranslate","_x","_y","_e","onStart","onDrag","pointerStart","style","touchAction","down","bind","destroyMove","move","destroyUp","up","destroy","pointerType","button","stopPropagation","pageX","pageY","preventDefault","delta","zoom","getBoundingClientRect","width","offsetWidth","Zoom","container","intensity","onzoom","wheel","dblclick","end","destroyCancel","pointers","rect","isNegative","deltaY","ox","left","clientX","oy","top","clientY","touches","x1","y1","x2","y2","distance","sqrt","pow","cx","cy","p","pointerId","translating","previous","filter","Area","emitter","k","document","createElement","transformOrigin","_zoom","onZoom","_drag","on","pointermove","update","t","transform","mouse","_startPosition","_objectSpread","dx","dy","translate","source","d","appendChild","removeChild","ConnectionView","inputNode","outputNode","zIndex","points","getPoints","hasSocket","getSocketPosition","ControlView","SocketView","type","nodeViewEl","offsetHeight","NodeView","onSelect","bindSocket","bindControl","sockets","s","includes","clearSockets","get","getPosition","payload","accumulate","ctrlKey","px","py","prev","EditorView","overflow","click","view","resize","updateConnections","entries","relatedConnections","requestAnimationFrame","area","nodeView","viewInput","viewOutput","connView","getConnections","conn","parentElement","clientWidth","height","clientHeight","target","Selected","contains","callback","Events","warn","console","error","componentregister","EditorEvents","nodecreate","nodecreated","noderemove","noderemoved","connectioncreate","connectioncreated","connectionremove","connectionremoved","translatenode","nodetranslate","nodetranslated","nodedraged","nodedragged","selectnode","multiselectnode","nodeselect","nodeselected","rendernode","rendersocket","rendercontrol","renderconnection","updateconnection","keydown","keyup","translated","zoomed","mousemove","contextmenu","process","clear","NodeEditor","selectNode","selected","each","n","addNode","removeNode","connectTo","remove","add","editor","checking","validate","silent","beforeImport","Promise","all","keys","getComponent","fromJSON","jsonNode","outputJson","jsonConnection","nodeId","targetOutput","targetInput","connect","afterImport","Output","compatibleWith","some","Socket","compatible","intersect","array1","array2","value","Recursion","acc","nodesData","b","inputNodes","inters","l","inter","findSelf","extractInputNodes","nodesArr","State","AVAILABLE","PROCESSED","ABORT","EngineEvents","Engine","Set","engine","register","message","abort","processDone","state","onAbort","ret","res","unlockPool","busy","outputData","a","conns","prevNode","processNode","connData","extractInputData","inputData","worker","args","lock","processWorker","unlock","nextNode","forwarded","forwardProcess","assign","recursion","throwError","recurrentNode","detect","startNode","i","startId","processStart","copy","processStartNode","processUnreachable"],"mappingssBA,WAAtB,gBAAA,YAAA,CAMI,SAAYC,SAAAA,CAAAA,IAAZ,EAA0B;EAAA,EAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;;EAAA,EAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAHV,EAGU,CAAA,CAAA;;EAAA,EAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAFF,IAEE,CAAA,CAAA;;IACtB,IAAKA,CAAAA,IAAL,GAAYA,IAAZ,CAAA;EACH,CARL,CAAA;;ACGA,MAAaC,IAAb,gBAAA,YAAA;EAaI,EAAA,SAAA,IAAA,CAAYD,IAAZ,EAA0B;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EATG,CAAC,GAAD,EAAM,GAAN,CASH,CAAA,CAAA;;MAAA,eARjB,CAAA,IAAA,EAAA,QAAA,EAAA,IAAIE,GAAJ,EAQiB,CAAA,CAAA;;MAAA,eAPhB,CAAA,IAAA,EAAA,SAAA,EAAA,IAAIA,GAAJ,EAOgB,CAAA,CAAA;;MAAA,eANf,CAAA,IAAA,EAAA,UAAA,EAAA,IAAIA,GAAJ,EAMe,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EALO,EAKP,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAJO,EAIP,CAAA,CAAA;;MACtB,IAAKF,CAAAA,IAAL,GAAYA,IAAZ,CAAA;EACA,IAAA,IAAA,CAAKG,EAAL,GAAUF,IAAI,CAACG,WAAL,EAAV,CAAA;EACH,GAAA;;EAhBL,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,MAAA;EAAA,IAAA,KAAA,EAkBI,cAAsDC,IAAtD,EAA4EC,IAA5E,EAAqFC,IAArF,EAAmG;EAC/F,MAAA,IAAIF,IAAI,CAACG,GAAL,CAASF,IAAI,CAACG,GAAd,CAAJ,EACI,MAAM,IAAIC,KAAJ,CAAA,iBAAA,CAAA,MAAA,CAA4BJ,IAAI,CAACG,GAAjC,EAAN,kCAAA,CAAA,CAAA,CAAA;EACJ,MAAA,IAAIH,IAAI,CAACC,IAAD,CAAJ,KAAe,IAAnB,EACI,MAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN,CAAA;QAEHJ,IAAD,CAA+BC,IAA/B,CAAA,GAAuC,IAAvC,CAAA;EACAF,MAAAA,IAAI,CAACM,GAAL,CAASL,IAAI,CAACG,GAAd,EAAmBH,IAAnB,CAAA,CAAA;EACH,KAAA;EA1BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KA4BI,EAAA,SAAA,UAAA,CAAWM,OAAX,EAA6B;EACzB,MAAA,IAAA,CAAKC,IAAL,CAAU,IAAA,CAAKC,QAAf,EAAyBF,OAAzB,EAAkC,QAAlC,CAAA,CAAA;;EACA,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EA/BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAiCI,EAAA,SAAA,aAAA,CAAcA,OAAd,EAAgC;QAC5BA,OAAO,CAACG,MAAR,GAAiB,IAAjB,CAAA;EAEA,MAAA,IAAA,CAAKD,QAAL,CAAA,QAAA,CAAA,CAAqBF,OAAO,CAACH,GAA7B,CAAA,CAAA;EACH,KAAA;EArCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAuCI,EAAA,SAAA,QAAA,CAASO,KAAT,EAAuB;EACnB,MAAA,IAAA,CAAKH,IAAL,CAAU,IAAA,CAAKI,MAAf,EAAuBD,KAAvB,EAA8B,MAA9B,CAAA,CAAA;;EACA,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EA1CL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KA4CI,EAAA,SAAA,WAAA,CAAYA,KAAZ,EAA0B;EACtBA,MAAAA,KAAK,CAACE,iBAAN,EAAA,CAAA;QACAF,KAAK,CAACG,IAAN,GAAa,IAAb,CAAA;EAEA,MAAA,IAAA,CAAKF,MAAL,CAAA,QAAA,CAAA,CAAmBD,KAAK,CAACP,GAAzB,CAAA,CAAA;EACH,KAAA;EAjDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAmDI,EAAA,SAAA,SAAA,CAAUW,MAAV,EAA0B;EACtB,MAAA,IAAA,CAAKP,IAAL,CAAU,IAAA,CAAKQ,OAAf,EAAwBD,MAAxB,EAAgC,MAAhC,CAAA,CAAA;;EACA,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EAtDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KAwDI,EAAA,SAAA,YAAA,CAAaA,MAAb,EAA6B;EACzBA,MAAAA,MAAM,CAACF,iBAAP,EAAA,CAAA;QACAE,MAAM,CAACD,IAAP,GAAc,IAAd,CAAA;EAEA,MAAA,IAAA,CAAKE,OAAL,CAAA,QAAA,CAAA,CAAoBD,MAAM,CAACX,GAA3B,CAAA,CAAA;EACH,KAAA;EA7DL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KA+DI,EAAA,SAAA,OAAA,CAASa,IAAT,EAAyC;QACrC,IAAKA,CAAAA,IAAL,GAAYA,IAAZ,CAAA;EACA,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EAlEL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAoEI,SAAiB,cAAA,GAAA;EACb,MAAA,IAAMC,GAAG,GAAA,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAO,IAAKN,CAAAA,MAAL,CAAYO,MAAZ,EAAP,CAAA,EAAA,kBAAA,CAAgC,IAAKH,CAAAA,OAAL,CAAaG,MAAb,EAAhC,CAAT,CAAA,CAAA;QACA,IAAMC,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAW,UAACC,GAAD,EAAMC,EAAN,EAAa;EACxC,QAAA,OAAA,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAWD,GAAX,CAAA,EAAA,kBAAA,CAAmBC,EAAE,CAACH,WAAtB,CAAA,CAAA,CAAA;SADgB,EAEjB,EAFiB,CAApB,CAAA;EAIA,MAAA,OAAOA,WAAP,CAAA;EACH,KAAA;EA3EL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EA6EI,kBAAS,EAAE;EA7Ef,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EA2FI,SAAmB,MAAA,GAAA;EACf,MAAA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAgCxB,IAAhC,EAAsE;UACnF,OAAOyB,KAAK,CAACC,IAAN,CAAW1B,IAAX,EAAiBqB,MAAjB,CAA2B,UAACM,GAAD,EAAoB,IAAA,EAAA;EAAA,UAAA,IAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;EAAA,cAAbvB,GAAa,GAAA,KAAA,CAAA,CAAA,CAAA;EAAA,cAARmB,EAAQ,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;EACjDI,UAAAA,GAAD,CAA6BvB,GAA7B,CAAA,GAAoCmB,EAAE,CAACK,MAAH,EAApC,CAAA;EACA,UAAA,OAAOD,GAAP,CAAA;WAFG,EAGJ,EAHI,CAAP,CAAA;SADJ,CAAA;;QAOA,OAAO;EACH,QAAA,IAAA,EAAM,KAAK7B,EADR;EAEH,QAAA,MAAA,EAAQ,KAAK+B,IAFV;EAGH,QAAA,QAAA,EAAUL,QAAQ,CAAa,IAAKZ,CAAAA,MAAlB,CAHf;EAIH,QAAA,SAAA,EAAWY,QAAQ,CAAc,IAAKR,CAAAA,OAAnB,CAJhB;EAKH,QAAA,UAAA,EAAY,KAAKc,QALd;EAMH,QAAA,MAAA,EAAQ,IAAKnC,CAAAA,IAAAA;SANjB,CAAA;EAQH,KAAA;EA3GL,GAAA,CAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EA+EI,SAAqB,WAAA,GAAA;QACjB,IAAI,CAAC,IAAKoC,CAAAA,QAAV,EACI,IAAA,CAAKA,QAAL,GAAgB,CAAhB,CADJ,KAGI,IAAA,CAAKA,QAAL,EAAA,CAAA;EACJ,MAAA,OAAO,KAAKA,QAAZ,CAAA;EACH,KAAA;EArFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAuFI,SAAiB,OAAA,GAAA;QACb,IAAKA,CAAAA,QAAL,GAAgB,CAAhB,CAAA;EACH,KAAA;EAzFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KA6GI,EAAA,SAAA,QAAA,CAAgBC,IAAhB,EAAgC;QAC5B,IAAMlB,IAAI,GAAG,IAAIlB,IAAJ,CAASoC,IAAI,CAACrC,IAAd,CAAb,CAAA;;QACA,IAAeqC,cAAAA,GAAAA,cAAAA,CAAAA,IAAI,CAACF,QAApB,EAAA,CAAA,CAAA;EAAA,UAAOG,CAAP,GAAA,cAAA,CAAA,CAAA,CAAA;EAAA,UAAUC,CAAV,GAAA,cAAA,CAAA,CAAA,CAAA,CAAA;;EAEApB,MAAAA,IAAI,CAAChB,EAAL,GAAUkC,IAAI,CAAClC,EAAf,CAAA;EACAgB,MAAAA,IAAI,CAACe,IAAL,GAAYG,IAAI,CAACH,IAAjB,CAAA;EACAf,MAAAA,IAAI,CAACgB,QAAL,GAAgB,CAACG,CAAD,EAAIC,CAAJ,CAAhB,CAAA;EACApB,MAAAA,IAAI,CAACnB,IAAL,GAAYqC,IAAI,CAACrC,IAAjB,CAAA;EACAC,MAAAA,IAAI,CAACmC,QAAL,GAAgBI,IAAI,CAACC,GAAL,CAAStB,IAAI,CAAChB,EAAd,EAAkBF,IAAI,CAACmC,QAAvB,CAAhB,CAAA;EAEA,MAAA,OAAOjB,IAAP,CAAA;EACH,KAAA;EAxHL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,IAAA,CAAA;EAAA,CAAA,GAAA;;EAAalB,eAAAA,CAAAA,kBAWS;;ACbtB,MAAsBF,SAAtB,gBAAA,UAAA,gBAAA,EAAA;EAAA,EAAA,SAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,SAAA,CAAA,CAAA;;EAKI,EAAA,SAAA,SAAA,CAAYC,IAAZ,EAA0B;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;;EACtB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,IAAN,CAAA,CAAA;;EADsB,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAHE,IAGF,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAFV,EAEU,CAAA,CAAA;;EAAA,IAAA,OAAA,KAAA,CAAA;EAEzB,GAAA;;EAPL,EAAA,YAAA,CAAA,SAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,MAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAWI,iBAAYmB,IAAZ,EAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OACU,IAAKuB,CAAAA,OAAL,CAAavB,IAAb,CADV,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAGWA,IAHX,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;SAXJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,KAAA,CAAA,EAAA,EAAA;EAAA,QAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,KAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAAA,YAAA;QAAA,IAiBI,WAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;EAAA,QAAA,IAAA,IAAA;EAAA,YAAA,IAAA;EAAA,YAAA,MAAA,GAAA,SAAA,CAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAiBe,gBAAAA,IAAjB,8DAAwB,EAAxB,CAAA;EACUf,gBAAAA,IADV,GACiB,IAAIlB,IAAJ,CAAS,IAAA,CAAKD,IAAd,CADjB,CAAA;kBAGImB,IAAI,CAACe,IAAL,GAAYA,IAAZ,CAAA;EAHJ,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAIU,IAAKS,CAAAA,KAAL,CAAWxB,IAAX,CAJV,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAMWA,IANX,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA,CAAA;SAjBJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,UAAA,GAAA;EAAA,QAAA,OAAA,WAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,UAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,SAAA,CAAA;EAAA,CAAA,CAAwCyB,WAAxC;;ACDA,MAAaC,UAAb,gBAAA,YAAA;IAMI,SAAYzB,UAAAA,CAAAA,MAAZ,EAA4BJ,KAA5B,EAA0C;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAF1B,EAE0B,CAAA,CAAA;;MACtC,IAAKI,CAAAA,MAAL,GAAcA,MAAd,CAAA;MACA,IAAKJ,CAAAA,KAAL,GAAaA,KAAb,CAAA;MACA,IAAKkB,CAAAA,IAAL,GAAY,EAAZ,CAAA;EAEA,IAAA,IAAA,CAAKlB,KAAL,CAAW8B,aAAX,CAAyB,IAAzB,CAAA,CAAA;EACH,GAAA;;EAZL,EAAA,YAAA,CAAA,UAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAcI,SAAS,MAAA,GAAA;EACL,MAAA,IAAA,CAAK9B,KAAL,CAAW+B,gBAAX,CAA4B,IAA5B,CAAA,CAAA;EACA,MAAA,IAAA,CAAK3B,MAAL,CAAY2B,gBAAZ,CAA6B,IAA7B,CAAA,CAAA;EACH,KAAA;EAjBL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,UAAA,CAAA;EAAA,CAAA;;ACAA,MAAaC,OAAb,gBAAA,YAAA;EAMI,EAAA,SAAA,OAAA,CAAYvC,GAAZ,EAAyB;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAHT,EAGS,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAFK,IAEL,CAAA,CAAA;;MACrB,IAAI,IAAA,CAAKwC,WAAL,KAAqBD,OAAzB,EACI,MAAM,IAAIE,SAAJ,CAAc,kCAAd,CAAN,CAAA;MACJ,IAAI,CAACzC,GAAL,EACI,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN,CAAA;MAEJ,IAAKD,CAAAA,GAAL,GAAWA,GAAX,CAAA;EACH,GAAA;;EAbL,EAAA,YAAA,CAAA,OAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAeI,SAAU,OAAA,GAAA;QACN,IAAI,IAAA,CAAKM,MAAL,KAAgB,IAApB,EACI,MAAM,IAAIL,KAAJ,CAAU,oCAAV,CAAN,CAAA;EAEJ,MAAA,IAAI,KAAKK,MAAL,YAAuBd,IAA3B,EACI,OAAO,KAAKc,MAAZ,CAAA;QAEJ,IAAI,CAAC,IAAKA,CAAAA,MAAL,CAAYI,IAAjB,EACI,MAAM,IAAIT,KAAJ,CAAU,2CAAV,CAAN,CAAA;QAEJ,OAAO,IAAA,CAAKK,MAAL,CAAYI,IAAnB,CAAA;EACH,KAAA;EA1BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KA4BI,EAAA,SAAA,OAAA,CAAQV,GAAR,EAAqB;EACjB,MAAA,OAAO,KAAK0C,OAAL,EAAA,CAAejB,IAAf,CAAoBzB,GAApB,CAAP,CAAA;EACH,KAAA;EA9BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAgCI,SAAQA,OAAAA,CAAAA,GAAR,EAAqByB,IAArB,EAAoC;EAChC,MAAA,IAAA,CAAKiB,OAAL,EAAejB,CAAAA,IAAf,CAAoBzB,GAApB,IAA2ByB,IAA3B,CAAA;EACH,KAAA;EAlCL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,OAAA,CAAA;EAAA,CAAA;;ACDA,MAAakB,OAAb,gBAAA,YAAA;EAKI,EAAA,SAAA,OAAA,CAAYC,MAAZ,EAAkD;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAHZ,EAGY,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAFzC,KAEyC,CAAA,CAAA;;EAC9C,IAAA,IAAA,CAAKA,MAAL,GAAcA,MAAM,YAAYD,OAAlB,GAA4BC,MAAM,CAACA,MAAnC,GAA4CA,MAAM,CAACC,QAAjE,CAAA;EACH,GAAA;;EAPL,EAAA,YAAA,CAAA,OAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,IAAA;EAAA,IAAA,KAAA,EASI,SAA+BC,EAAAA,CAAAA,KAA/B,EAA+CC,OAA/C,EAAuG;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;EACnG,MAAA,IAAMH,MAAM,GAAGE,KAAK,YAAYzB,KAAjB,GAAyByB,KAAzB,GAAkCA,KAAD,CAAkBE,KAAlB,CAAwB,GAAxB,CAAhD,CAAA;EAECJ,MAAAA,MAAD,CAAqBK,OAArB,CAA6B,UAAA1D,IAAI,EAAI;EACjC,QAAA,IAAI,CAAC,KAAI,CAACqD,MAAL,CAAYrD,IAAZ,CAAL,EACI,MAAM,IAAIU,KAAJ,CAAA,YAAA,CAAA,MAAA,CAAuBV,IAAvB,EAAN,iBAAA,CAAA,CAAA,CAAA;;EACJ,QAAA,KAAI,CAACqD,MAAL,CAAYrD,IAAZ,CAAkB2D,CAAAA,IAAlB,CAAuBH,OAAvB,CAAA,CAAA;SAHJ,CAAA,CAAA;EAMA,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EAnBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KAqBI,EAAA,SAAA,OAAA,CAAoCxD,IAApC,EAA8E;QAAA,IAAjC4D,MAAiC,uEAAJ,EAAI,CAAA;EAC1E,MAAA,IAAI,EAAE5D,IAAI,IAAI,IAAA,CAAKqD,MAAf,CAAJ,EACI,MAAM,IAAI3C,KAAJ,CAAuBmD,YAAAA,CAAAA,MAAAA,CAAAA,MAAM,CAAC7D,IAAD,CAA7B,EAAN,sBAAA,CAAA,CAAA,CAAA;QAEJ,OAAO,IAAA,CAAKqD,MAAL,CAAYrD,IAAZ,CAAA,CAA4B0B,MAA5B,CAAmC,UAACoC,CAAD,EAAaC,CAAb,EAA6B;EACnE,QAAA,OAAQA,CAAC,CAACH,MAAD,CAAD,KAAc,KAAf,IAAyBE,CAAhC,CAAA;EACH,OAFM,EAEJ,IAFI,CAAP,CAJ0E;EAO7E,KAAA;EA5BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KA8BI,EAAA,SAAA,IAAA,CAAK9D,IAAL,EAAmB;QACf,IAAI,IAAA,CAAKqD,MAAL,CAAYrD,IAAZ,CAAJ,EACI,MAAM,IAAIU,KAAJ,CAAuBV,YAAAA,CAAAA,MAAAA,CAAAA,IAAvB,EAAN,mBAAA,CAAA,CAAA,CAAA;EAEJ,MAAA,IAAA,CAAKqD,MAAL,CAAYrD,IAAZ,CAAA,GAAoB,EAApB,CAAA;EACH,KAAA;EAnCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;MAAA,KAqCI,EAAA,SAAA,KAAA,CAAMA,IAAN,EAAoB;QAChB,OAAO8B,KAAK,CAACkC,OAAN,CAAc,KAAKX,MAAL,CAAYrD,IAAZ,CAAd,CAAP,CAAA;EACH,KAAA;EAvCL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,OAAA,CAAA;EAAA,CAAA;;ACEA,MAAaiE,EAAb,gBAAA,YAAA;EAUI,EAAA,SAAA,EAAA,CAAYxD,GAAZ,EAAyBT,IAAzB,EAAuCkE,MAAvC,EAAuDC,UAAvD,EAA4E;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EARxD,IAQwD,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EANhD,EAMgD,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAC3E,IAAKhD,CAAAA,IAAL,GAAY,IAAZ,CAAA;MACG,IAAKiD,CAAAA,mBAAL,GAA2BD,UAA3B,CAAA;MACA,IAAK1C,CAAAA,WAAL,GAAmB,EAAnB,CAAA;MAEA,IAAKhB,CAAAA,GAAL,GAAWA,GAAX,CAAA;MACA,IAAKT,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACA,IAAKkE,CAAAA,MAAL,GAAcA,MAAd,CAAA;EACH,GAAA;;EAlBL,EAAA,YAAA,CAAA,EAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KAoBI,EAAA,SAAA,gBAAA,CAAiBG,UAAjB,EAAyC;EACrC,MAAA,IAAA,CAAK5C,WAAL,CAAiB6C,MAAjB,CAAwB,IAAK7C,CAAAA,WAAL,CAAiB8C,OAAjB,CAAyBF,UAAzB,CAAxB,EAA8D,CAA9D,CAAA,CAAA;EACH,KAAA;EAtBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;EAAA,IAAA,KAAA,EAwBI,SAAoB,iBAAA,GAAA;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;EAChB,MAAA,IAAA,CAAK5C,WAAL,CAAiBiC,OAAjB,CAAyB,UAAAW,UAAU,EAAA;EAAA,QAAA,OAAI,KAAI,CAACtB,gBAAL,CAAsBsB,UAAtB,CAAJ,CAAA;SAAnC,CAAA,CAAA;EACH,KAAA;EA1BL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,EAAA,CAAA;EAAA,CAAA;;ACEA,MAAaG,KAAb,gBAAA,UAAA,GAAA,EAAA;EAAA,EAAA,SAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,KAAA,CAAA,CAAA;;EAII,EAAA,SAAA,KAAA,CAAY/D,GAAZ,EAAyBgE,KAAzB,EAAwCP,MAAxC,EAA4E;EAAA,IAAA,IAAA,KAAA,CAAA;;MAAA,IAApBC,UAAoB,uEAAP,KAAO,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;EACxE,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM1D,GAAN,EAAWgE,KAAX,EAAkBP,MAAlB,EAA0BC,UAA1B,CAAA,CAAA;;EADwE,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAFlD,IAEkD,CAAA,CAAA;;EAAA,IAAA,OAAA,KAAA,CAAA;EAE3E,GAAA;;EANL,EAAA,YAAA,CAAA,KAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAQI,SAAgB,aAAA,GAAA;EACZ,MAAA,OAAO,IAAK1C,CAAAA,WAAL,CAAiBiD,MAAjB,GAA0B,CAAjC,CAAA;EACH,KAAA;EAVL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAYI,EAAA,SAAA,aAAA,CAAcL,UAAd,EAAsC;EAClC,MAAA,IAAI,CAAC,IAAA,CAAKD,mBAAN,IAA6B,IAAKO,CAAAA,aAAL,EAAjC,EACI,MAAM,IAAIjE,KAAJ,CAAU,kCAAV,CAAN,CAAA;EACJ,MAAA,IAAA,CAAKe,WAAL,CAAiBkC,IAAjB,CAAsBU,UAAtB,CAAA,CAAA;EACH,KAAA;EAhBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAkBI,EAAA,SAAA,UAAA,CAAWzD,OAAX,EAA6B;QACzB,IAAKA,CAAAA,OAAL,GAAeA,OAAf,CAAA;QACAA,OAAO,CAACG,MAAR,GAAiB,IAAjB,CAAA;EACH,KAAA;EArBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAuBI,SAAc,WAAA,GAAA;QACV,OAAO,CAAC,KAAK4D,aAAL,EAAD,IAAyB,IAAK/D,CAAAA,OAAL,KAAiB,IAAjD,CAAA;EACH,KAAA;EAzBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EA2BI,SAAoB,MAAA,GAAA;QAChB,OAAO;EACH,QAAA,aAAA,EAAe,KAAKa,WAAL,CAAiBmD,GAAjB,CAAqB,UAAAC,CAAC,EAAI;EACrC,UAAA,IAAI,CAACA,CAAC,CAACzD,MAAF,CAASD,IAAd,EAAoB,MAAM,IAAIT,KAAJ,CAAU,0BAAV,CAAN,CAAA;YAEpB,OAAO;EACHS,YAAAA,IAAI,EAAE0D,CAAC,CAACzD,MAAF,CAASD,IAAT,CAAchB,EADjB;EAEHiB,YAAAA,MAAM,EAAEyD,CAAC,CAACzD,MAAF,CAASX,GAFd;cAGHyB,IAAI,EAAE2C,CAAC,CAAC3C,IAAAA;aAHZ,CAAA;WAHW,CAAA;SADnB,CAAA;EAWH,KAAA;EAvCL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,KAAA,CAAA;EAAA,CAAA,CAA2B+B,EAA3B;;ECJA,IAAaa,SAAb,gBAAA,YAAA;EAAA,EAAA,SAAA,SAAA,GAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,GAAA;;EAAA,EAAA,YAAA,CAAA,SAAA,EAAA,IAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAEI,EAAA,SAAA,WAAA,CAAmB5C,IAAnB,EAA+B;QAC3B,OAAO,OAAOA,IAAI,CAAC/B,EAAZ,KAAmB,QAAnB,IACH,IAAK4E,CAAAA,SAAL,CAAe7C,IAAI,CAAC/B,EAApB,CADG,IAEH+B,IAAI,CAAC8C,KAAL,YAAsBC,MAFnB,IAE6B,EAAE/C,IAAI,CAAC8C,KAAL,YAAsBlD,KAAxB,CAFpC,CAAA;EAGH,KAAA;EANL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAQI,EAAA,SAAA,SAAA,CAAiB3B,EAAjB,EAA6B;EACzB,MAAA,OAAO,oCAAqC+E,CAAAA,IAArC,CAA0C/E,EAA1C,CAAP,CAAA;EACH,KAAA;EAVL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAYI,SAAgBA,QAAAA,CAAAA,EAAhB,EAA4B+B,IAA5B,EAAwC;EACpC,MAAA,IAAMiD,GAAG,GAAGhF,EAAE,CAACsD,KAAH,CAAS,GAAT,CAAZ,CAAA;QACA,IAAM2B,GAAG,GAAGlD,IAAI,CAAC/B,EAAL,CAAQsD,KAAR,CAAc,GAAd,CAAZ,CAAA;QACA,IAAM4B,GAAG,GAAG,EAAZ,CAAA;QAEA,IAAI,CAAC,IAAKC,CAAAA,WAAL,CAAiBpD,IAAjB,CAAL,EACImD,GAAG,CAAC1B,IAAJ,CAAS,sBAAT,CAAA,CAAA;QACJ,IAAIxD,EAAE,KAAK+B,IAAI,CAAC/B,EAAhB,EACIkF,GAAG,CAAC1B,IAAJ,CAAS,eAAT,CAAA,CAAA;EACJ,MAAA,IAAIwB,GAAG,CAAC,CAAD,CAAH,KAAWC,GAAG,CAAC,CAAD,CAAlB,EACIC,GAAG,CAAC1B,IAAJ,CAAS,oBAAT,CAAA,CAAA;EACJ,MAAA,IAAIwB,GAAG,CAAC,CAAD,CAAH,KAAWC,GAAG,CAAC,CAAD,CAAlB,EACIC,GAAG,CAAC1B,IAAJ,CAAS,uBAAT,CAAA,CAAA;QAEJ,OAAO;EAAE4B,QAAAA,OAAO,EAAEC,OAAO,CAAC,CAACH,GAAG,CAACX,MAAN,CAAlB;EAAiCW,QAAAA,GAAG,EAAEA,GAAG,CAACI,IAAJ,CAAS,IAAT,CAAA;SAA7C,CAAA;EACH,KAAA;EA3BL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,SAAA,CAAA;EAAA,CAAA,EAAA;;ECIA,IAAaC,OAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,OAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,CAAA;;IAMI,SAAYvF,OAAAA,CAAAA,EAAZ,EAAwBkD,MAAxB,EAAwC;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;;EACpC,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,MAAN,CAAA,CAAA;;EADoC,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAGpC,IAAA,IAAI,CAACyB,SAAS,CAACC,SAAV,CAAoB5E,EAApB,CAAL,EACI,MAAM,IAAIO,KAAJ,CAAU,yCAAV,CAAN,CAAA;MAEJ,KAAKP,CAAAA,EAAL,GAAUA,EAAV,CAAA;EACA,IAAA,KAAA,CAAKwF,OAAL,GAAe,IAAIzF,GAAJ,EAAf,CAAA;EACA,IAAA,KAAA,CAAK0F,UAAL,GAAkB,IAAI1F,GAAJ,EAAlB,CAAA;EARoC,IAAA,OAAA,KAAA,CAAA;EASvC,GAAA;;EAfL,EAAA,YAAA,CAAA,OAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,KAAA;EAAA,IAAA,KAAA,EAiBI,SAAiD2F,GAAAA,CAAAA,MAAjD,EAA4DC,OAA5D,EAAyE;QACrE,IAAID,MAAM,CAAC7F,IAAP,IAAe,KAAK2F,OAAL,CAAanF,GAAb,CAAiBqF,MAAM,CAAC7F,IAAxB,CAAnB,EAAkD,MAAM,IAAIU,KAAJ,CAAoBmF,SAAAA,CAAAA,MAAAA,CAAAA,MAAM,CAAC7F,IAA3B,EAAN,iBAAA,CAAA,CAAA,CAAA;EAElD6F,MAAAA,MAAM,CAACE,OAAP,CAAe,IAAf,EAAqBD,OAAO,IAAI,EAAhC,CAAA,CAAA;QACA,IAAKH,CAAAA,OAAL,CAAahF,GAAb,CAAiBkF,MAAM,CAAC7F,IAAxB,EAA8B8F,OAA9B,CAAA,CAAA;EACH,KAAA;EAtBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAwBI,EAAA,SAAA,QAAA,CAASE,SAAT,EAA+B;EAC3B,MAAA,IAAI,KAAKJ,UAAL,CAAgBpF,GAAhB,CAAoBwF,SAAS,CAAChG,IAA9B,CAAJ,EACI,MAAM,IAAIU,KAAJ,qBAAuBsF,SAAS,CAAChG,IAAjC,EAAN,qBAAA,CAAA,CAAA,CAAA;QAEJ,IAAK4F,CAAAA,UAAL,CAAgBjF,GAAhB,CAAoBqF,SAAS,CAAChG,IAA9B,EAAoCgG,SAApC,CAAA,CAAA;EACA,MAAA,IAAA,CAAKC,OAAL,CAAa,mBAAb,EAAkCD,SAAlC,CAAA,CAAA;EACH,KAAA;EA9BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAgCI,SAAU,OAAA,GAAA;QACN,IAAKC,CAAAA,OAAL,CAAa,SAAb,CAAA,CAAA;EACH,KAAA;EAlCL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,OAAA,CAAA;EAAA,CAAA,CAA0C7C,OAA1C,CAAA;;ECNO,SAAS8C,YAAT,CAAsDC,KAAtD,EAAgE3C,OAAhE,EAAyG;EAC5G4C,EAAAA,MAAM,CAACC,gBAAP,CAAwBF,KAAxB,EAA+B3C,OAA/B,CAAA,CAAA;EAEA,EAAA,OAAO,YAAM;EACT4C,IAAAA,MAAM,CAACE,mBAAP,CAA8BH,KAA9B,EAAqC3C,OAArC,CAAA,CAAA;KADJ,CAAA;EAGH,CAAA;EAGM,SAAS+C,SAAT,CAAmBC,EAAnB,EAAoCC,cAApC,EAAkF;IAAA,IAAjBC,WAAiB,uEAAH,CAAG,CAAA;EACrF,EAAA,IAAIpE,CAAC,GAAGkE,EAAE,CAACG,UAAX,CAAA;EACA,EAAA,IAAIpE,CAAC,GAAGiE,EAAE,CAACI,SAAX,CAAA;EACA,EAAA,IAAI7F,MAAM,GAAGyF,EAAE,CAACK,YAAhB,CAAA;;IAEA,OAAO9F,MAAM,IAAIA,MAAM,KAAK0F,cAArB,IAAuCC,WAAW,GAAG,CAA5D,EAA+D;MAC3DA,WAAW,EAAA,CAAA;MACXpE,CAAC,IAAIvB,MAAM,CAAC4F,UAAZ,CAAA;MACApE,CAAC,IAAIxB,MAAM,CAAC6F,SAAZ,CAAA;MACA7F,MAAM,GAAGA,MAAM,CAAC8F,YAAhB,CAAA;EACH,GAAA;;IAED,OAAO;EAAEvE,IAAAA,CAAC,EAADA,CAAF;EAAKC,IAAAA,CAAC,EAADA,CAAAA;KAAZ,CAAA;EACH;;ECpBD,IAAauE,IAAb,gBAAA,YAAA;EAMI,EAAA,SAAA,IAAA,CACIN,EADJ,EAKE;MAAA,IAHUO,WAGV,GAHwB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,UAACC,EAAD,EAAaC,EAAb,EAAyBC,EAAzB,EAA8C,EAGtE,CAAA;EAAA,IAAA,IAFUC,OAEV,GAFoB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,UAACD,EAAD,EAAsB,EAE1C,CAAA;EAAA,IAAA,IADUE,MACV,GADmB,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,UAACF,EAAD,EAAsB,EACzC,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;;MAAA,IAHUH,CAAAA,WAGV,GAHUA,WAGV,CAAA;MAAA,IAFUI,CAAAA,OAEV,GAFUA,OAEV,CAAA;MAAA,IADUC,CAAAA,MACV,GADUA,MACV,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MACE,IAAKC,CAAAA,YAAL,GAAoB,IAApB,CAAA;MACA,IAAKb,CAAAA,EAAL,GAAUA,EAAV,CAAA;EAEA,IAAA,IAAA,CAAKA,EAAL,CAAQc,KAAR,CAAcC,WAAd,GAA4B,MAA5B,CAAA;EACA,IAAA,IAAA,CAAKf,EAAL,CAAQH,gBAAR,CAAyB,aAAzB,EAAwC,IAAKmB,CAAAA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAxC,CAAA,CAAA;EAEA,IAAA,IAAMC,WAAW,GAAGxB,YAAY,CAAC,aAAD,EAAgB,IAAKyB,CAAAA,IAAL,CAAUF,IAAV,CAAe,IAAf,CAAhB,CAAhC,CAAA;EACA,IAAA,IAAMG,SAAS,GAAG1B,YAAY,CAAC,WAAD,EAAc,IAAK2B,CAAAA,EAAL,CAAQJ,IAAR,CAAa,IAAb,CAAd,CAA9B,CAAA;;MAEA,IAAKK,CAAAA,OAAL,GAAe,YAAM;QAAEJ,WAAW,EAAA,CAAA;QAAIE,SAAS,EAAA,CAAA;OAA/C,CAAA;EACH,GAAA;;EAtBL,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KAwBI,EAAA,SAAA,IAAA,CAAK7D,CAAL,EAAsB;QAClB,IAAKA,CAAC,CAACgE,WAAF,KAAkB,OAAnB,IAAgChE,CAAC,CAACiE,MAAF,KAAa,CAAjD,EAAqD,OAAA;EACrDjE,MAAAA,CAAC,CAACkE,eAAF,EAAA,CAAA;QACA,IAAKZ,CAAAA,YAAL,GAAoB,CAACtD,CAAC,CAACmE,KAAH,EAAUnE,CAAC,CAACoE,KAAZ,CAApB,CAAA;QAEA,IAAKhB,CAAAA,OAAL,CAAapD,CAAb,CAAA,CAAA;EACH,KAAA;EA9BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KAgCI,EAAA,SAAA,IAAA,CAAKA,CAAL,EAAsB;QAClB,IAAI,CAAC,IAAKsD,CAAAA,YAAV,EAAwB,OAAA;EACxBtD,MAAAA,CAAC,CAACqE,cAAF,EAAA,CAAA;QAEA,IAAe,IAAA,GAAA,CAACrE,CAAC,CAACmE,KAAH,EAAUnE,CAAC,CAACoE,KAAZ,CAAf;EAAA,UAAO7F,CAAP,GAAA,IAAA,CAAA,CAAA,CAAA;EAAA,UAAUC,CAAV,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA;EAEA,MAAA,IAAM8F,KAAK,GAAG,CAAC/F,CAAC,GAAG,IAAA,CAAK+E,YAAL,CAAkB,CAAlB,CAAL,EAA2B9E,CAAC,GAAG,IAAA,CAAK8E,YAAL,CAAkB,CAAlB,CAA/B,CAAd,CAAA;EAEA,MAAA,IAAMiB,IAAI,GAAG,IAAK9B,CAAAA,EAAL,CAAQ+B,qBAAR,EAAgCC,CAAAA,KAAhC,GAAwC,IAAA,CAAKhC,EAAL,CAAQiC,WAA7D,CAAA;EAEA,MAAA,IAAA,CAAK1B,WAAL,CAAiBsB,KAAK,CAAC,CAAD,CAAL,GAAWC,IAA5B,EAAkCD,KAAK,CAAC,CAAD,CAAL,GAAWC,IAA7C,EAAmDvE,CAAnD,CAAA,CAAA;EACH,KAAA;EA3CL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,IAAA;MAAA,KA6CI,EAAA,SAAA,EAAA,CAAGA,CAAH,EAAoB;QAChB,IAAI,CAAC,IAAKsD,CAAAA,YAAV,EAAwB,OAAA;QAExB,IAAKA,CAAAA,YAAL,GAAoB,IAApB,CAAA;QACA,IAAKD,CAAAA,MAAL,CAAYrD,CAAZ,CAAA,CAAA;EACH,KAAA;EAlDL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,IAAA,CAAA;EAAA,CAAA,EAAA;;ECAA,IAAa2E,IAAb,gBAAA,YAAA;EAUI,EAAA,SAAA,IAAA,CAAYC,SAAZ,EAAoCnC,EAApC,EAAqDoC,SAArD,EAAwEC,MAAxE,EAA0F;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAL1B,IAK0B,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAH/D,EAG+D,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MACtF,IAAKrC,CAAAA,EAAL,GAAUA,EAAV,CAAA;MACA,IAAKoC,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;MACA,IAAKC,CAAAA,MAAL,GAAcA,MAAd,CAAA;MAEAF,SAAS,CAACtC,gBAAV,CAA2B,OAA3B,EAAoC,IAAKyC,CAAAA,KAAL,CAAWrB,IAAX,CAAgB,IAAhB,CAApC,CAAA,CAAA;MACAkB,SAAS,CAACtC,gBAAV,CAA2B,aAA3B,EAA0C,IAAKmB,CAAAA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAA1C,CAAA,CAAA;MACAkB,SAAS,CAACtC,gBAAV,CAA2B,UAA3B,EAAuC,IAAK0C,CAAAA,QAAL,CAActB,IAAd,CAAmB,IAAnB,CAAvC,CAAA,CAAA;EAEA,IAAA,IAAMC,WAAW,GAAGxB,YAAY,CAAC,aAAD,EAAgB,IAAKyB,CAAAA,IAAL,CAAUF,IAAV,CAAe,IAAf,CAAhB,CAAhC,CAAA;EACA,IAAA,IAAMG,SAAS,GAAG1B,YAAY,CAAC,WAAD,EAAc,IAAK8C,CAAAA,GAAL,CAASvB,IAAT,CAAc,IAAd,CAAd,CAA9B,CAAA;EACA,IAAA,IAAMwB,aAAa,GAAG/C,YAAY,CAAC,eAAD,EAAkB,IAAK8C,CAAAA,GAAL,CAASvB,IAAT,CAAc,IAAd,CAAlB,CAAlC,CAAA;;MAEA,IAAKK,CAAAA,OAAL,GAAe,YAAM;QAAEJ,WAAW,EAAA,CAAA;QAAIE,SAAS,EAAA,CAAA;QAAIqB,aAAa,EAAA,CAAA;OAAhE,CAAA;EACH,GAAA;;EAxBL,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,GAAA,EA0BI,SAAkB,GAAA,GAAA;EAAE;EAChB,MAAA,OAAO,IAAKC,CAAAA,QAAL,CAAcxE,MAAd,IAAwB,CAA/B,CAAA;EACH,KAAA;EA5BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;MAAA,KA8BI,EAAA,SAAA,KAAA,CAAMX,CAAN,EAAqB;EACjBA,MAAAA,CAAC,CAACqE,cAAF,EAAA,CAAA;EAEA,MAAA,IAAMe,IAAI,GAAG,IAAA,CAAK3C,EAAL,CAAQ+B,qBAAR,EAAb,CAAA;EACA,MAAA,IAAMa,UAAU,GAAGrF,CAAC,CAACsF,MAAF,GAAW,CAA9B,CAAA;QACA,IAAMhB,KAAK,GAAGe,UAAU,GAAG,KAAKR,SAAR,GAAoB,CAAE,IAAA,CAAKA,SAAnD,CAAA;QACA,IAAMU,EAAE,GAAG,CAACH,IAAI,CAACI,IAAL,GAAYxF,CAAC,CAACyF,OAAf,IAA0BnB,KAArC,CAAA;QACA,IAAMoB,EAAE,GAAG,CAACN,IAAI,CAACO,GAAL,GAAW3F,CAAC,CAAC4F,OAAd,IAAyBtB,KAApC,CAAA;QAEA,IAAKQ,CAAAA,MAAL,CAAYR,KAAZ,EAAmBiB,EAAnB,EAAuBG,EAAvB,EAA2B,OAA3B,CAAA,CAAA;EACH,KAAA;EAxCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EA0CI,SAAU,OAAA,GAAA;EACN,MAAA,IAAM1F,CAAC,GAAG;EAAE6F,QAAAA,OAAO,EAAE,IAAKV,CAAAA,QAAAA;SAA1B,CAAA;EACA,MAAA,IAAA,IAAA,GAAiB,CAACnF,CAAC,CAAC6F,OAAF,CAAU,CAAV,CAAaJ,CAAAA,OAAd,EAAuBzF,CAAC,CAAC6F,OAAF,CAAU,CAAV,CAAA,CAAaD,OAApC,CAAjB;EAAA,UAAOE,EAAP,GAAA,IAAA,CAAA,CAAA,CAAA;EAAA,UAAWC,EAAX,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA;EACA,MAAA,IAAA,KAAA,GAAiB,CAAC/F,CAAC,CAAC6F,OAAF,CAAU,CAAV,CAAaJ,CAAAA,OAAd,EAAuBzF,CAAC,CAAC6F,OAAF,CAAU,CAAV,CAAA,CAAaD,OAApC,CAAjB;EAAA,UAAOI,EAAP,GAAA,KAAA,CAAA,CAAA,CAAA;EAAA,UAAWC,EAAX,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;QAEA,IAAMC,QAAQ,GAAGzH,IAAI,CAAC0H,IAAL,CAAU1H,IAAI,CAAC2H,GAAL,CAASN,EAAE,GAAGE,EAAd,EAAkB,CAAlB,CAAA,GAAuBvH,IAAI,CAAC2H,GAAL,CAASL,EAAE,GAAGE,EAAd,EAAkB,CAAlB,CAAjC,CAAjB,CAAA;QAEA,OAAO;EACHI,QAAAA,EAAE,EAAE,CAACP,EAAE,GAAGE,EAAN,IAAU,CADX;EAEHM,QAAAA,EAAE,EAAE,CAACP,EAAE,GAAGE,EAAN,IAAU,CAFX;EAGHC,QAAAA,QAAQ,EAARA,QAAAA;SAHJ,CAAA;EAKH,KAAA;EAtDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KAwDI,EAAA,SAAA,IAAA,CAAKlG,CAAL,EAAsB;EAClB,MAAA,IAAA,CAAKmF,QAAL,CAAcvF,IAAd,CAAmBI,CAAnB,CAAA,CAAA;EACH,KAAA;EA1DL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KA4DI,EAAA,SAAA,IAAA,CAAKA,CAAL,EAAsB;QAClB,IAAKmF,CAAAA,QAAL,GAAgB,IAAKA,CAAAA,QAAL,CAActE,GAAd,CAAkB,UAAA0F,CAAC,EAAA;UAAA,OAAIA,CAAC,CAACC,SAAF,KAAgBxG,CAAC,CAACwG,SAAlB,GAA8BxG,CAA9B,GAAkCuG,CAAtC,CAAA;EAAA,OAAnB,CAAhB,CAAA;QACA,IAAI,CAAC,IAAKE,CAAAA,WAAV,EAAuB,OAAA;EAEvB,MAAA,IAAMrB,IAAI,GAAG,IAAA,CAAK3C,EAAL,CAAQ+B,qBAAR,EAAb,CAAA;;QAEA,IAA6B,aAAA,GAAA,IAAA,CAAKqB,OAAL,EAA7B;YAAQQ,EAAR,iBAAQA,EAAR;YAAYC,EAAZ,iBAAYA,EAAZ;YAAgBJ,QAAhB,iBAAgBA,QAAhB,CAAA;;EAEA,MAAA,IAAI,IAAKQ,CAAAA,QAAL,KAAkB,IAAtB,EAA4B;UACxB,IAAMpC,KAAK,GAAG4B,QAAQ,GAAG,KAAKQ,QAAL,CAAcR,QAAzB,GAAoC,CAAlD,CAAA;UAEA,IAAMX,EAAE,GAAG,CAACH,IAAI,CAACI,IAAL,GAAYa,EAAb,IAAmB/B,KAA9B,CAAA;UACA,IAAMoB,EAAE,GAAG,CAACN,IAAI,CAACO,GAAL,GAAWW,EAAZ,IAAkBhC,KAA7B,CAAA;UAEA,IAAKQ,CAAAA,MAAL,CAAYR,KAAZ,EAAmBiB,EAAE,IAAI,IAAKmB,CAAAA,QAAL,CAAcL,EAAd,GAAmBA,EAAvB,CAArB,EAAiDX,EAAE,IAAI,IAAA,CAAKgB,QAAL,CAAcJ,EAAd,GAAmBA,EAAvB,CAAnD,EAA+E,OAA/E,CAAA,CAAA;EACH,OAAA;;EACD,MAAA,IAAA,CAAKI,QAAL,GAAgB;EAAEL,QAAAA,EAAE,EAAFA,EAAF;EAAMC,QAAAA,EAAE,EAAFA,EAAN;EAAUJ,QAAAA,QAAQ,EAARA,QAAAA;SAA1B,CAAA;EACH,KAAA;EA7EL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,KAAA;MAAA,KA+EI,EAAA,SAAA,GAAA,CAAIlG,CAAJ,EAAqB;QACjB,IAAK0G,CAAAA,QAAL,GAAgB,IAAhB,CAAA;QACA,IAAKvB,CAAAA,QAAL,GAAgB,IAAKA,CAAAA,QAAL,CAAcwB,MAAd,CAAqB,UAAAJ,CAAC,EAAA;EAAA,QAAA,OAAIA,CAAC,CAACC,SAAF,KAAgBxG,CAAC,CAACwG,SAAtB,CAAA;EAAA,OAAtB,CAAhB,CAAA;EACH,KAAA;EAlFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAoFI,EAAA,SAAA,QAAA,CAASxG,CAAT,EAAwB;EACpBA,MAAAA,CAAC,CAACqE,cAAF,EAAA,CAAA;EAEA,MAAA,IAAMe,IAAI,GAAG,IAAA,CAAK3C,EAAL,CAAQ+B,qBAAR,EAAb,CAAA;EACA,MAAA,IAAMF,KAAK,GAAG,CAAI,GAAA,IAAA,CAAKO,SAAvB,CAAA;QAEA,IAAMU,EAAE,GAAG,CAACH,IAAI,CAACI,IAAL,GAAYxF,CAAC,CAACyF,OAAf,IAA0BnB,KAArC,CAAA;QACA,IAAMoB,EAAE,GAAG,CAACN,IAAI,CAACO,GAAL,GAAW3F,CAAC,CAAC4F,OAAd,IAAyBtB,KAApC,CAAA;QAEA,IAAKQ,CAAAA,MAAL,CAAYR,KAAZ,EAAmBiB,EAAnB,EAAuBG,EAAvB,EAA2B,UAA3B,CAAA,CAAA;EACH,KAAA;EA9FL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,IAAA,CAAA;EAAA,CAAA,EAAA;;ECOA,IAAakB,IAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,IAAA,CAAA,CAAA;;IAWI,SAAYhC,IAAAA,CAAAA,SAAZ,EAAoCiC,OAApC,EAAmE;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;;EAC/D,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAN,CAAA,CAAA;;EAD+D,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAAA,eAP5C,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA;EAAEC,MAAAA,CAAC,EAAE,CAAL;EAAQvI,MAAAA,CAAC,EAAE,CAAX;EAAcC,MAAAA,CAAC,EAAE,CAAA;OAO2B,CAAA,CAAA;;MAAA,eANpD,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAAA;EAAED,MAAAA,CAAC,EAAE,CAAL;EAAQC,MAAAA,CAAC,EAAE,CAAA;OAMyC,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAJxB,IAIwB,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAG/D,IAAMiE,EAAE,GAAG,KAAA,CAAKA,EAAL,GAAUsE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAArB,CAAA;MAEA,KAAKpC,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;EACAnC,IAAAA,EAAE,CAACc,KAAH,CAAS0D,eAAT,GAA2B,KAA3B,CAAA;EAEA,IAAA,KAAA,CAAKC,KAAL,GAAa,IAAIvC,IAAJ,CAASC,SAAT,EAAoBnC,EAApB,EAAwB,GAAxB,EAA6B,KAAK0E,CAAAA,MAAL,CAAYzD,IAAZ,+BAA7B,CAAb,CAAA;EACA,IAAA,KAAA,CAAK0D,KAAL,GAAa,IAAIrE,IAAJ,CAAS6B,SAAT,EAAoB,KAAK5B,CAAAA,WAAL,CAAiBU,IAAjB,+BAApB,EAAiD,KAAA,CAAKN,OAAL,CAAaM,IAAb,+BAAjD,CAAb,CAAA;EAEAmD,IAAAA,OAAO,CAACQ,EAAR,CAAW,SAAX,EAAsB,YAAM;QACxB,KAAKH,CAAAA,KAAL,CAAWnD,OAAX,EAAA,CAAA;;QACA,KAAKqD,CAAAA,KAAL,CAAWrD,OAAX,EAAA,CAAA;OAFJ,CAAA,CAAA;;MAKA,KAAKa,CAAAA,SAAL,CAAetC,gBAAf,CAAgC,aAAhC,EAA+C,KAAKgF,CAAAA,WAAL,CAAiB5D,IAAjB,CAA/C,sBAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;EAEA,IAAA,KAAA,CAAK6D,MAAL,EAAA,CAAA;;EAlB+D,IAAA,OAAA,KAAA,CAAA;EAmBlE,GAAA;;EA9BL,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAgCI,SAAS,MAAA,GAAA;QACL,IAAMC,CAAC,GAAG,IAAA,CAAKC,SAAf,CAAA;EAEA,MAAA,IAAA,CAAKhF,EAAL,CAAQc,KAAR,CAAckE,SAAd,uBAAuCD,CAAC,CAACjJ,CAAzC,EAAA,MAAA,CAAA,CAAA,MAAA,CAAiDiJ,CAAC,CAAChJ,CAAnD,EAAiEgJ,YAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAC,CAACV,CAAnE,EAAA,GAAA,CAAA,CAAA;EACH,KAAA;EApCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAsCI,EAAA,SAAA,WAAA,CAAY9G,CAAZ,EAA6B;EACzB,MAAA,IAAQyF,OAAR,GAA6BzF,CAA7B,CAAQyF,OAAR;EAAA,UAAiBG,OAAjB,GAA6B5F,CAA7B,CAAiB4F,OAAjB,CAAA;EACA,MAAA,IAAMR,IAAI,GAAG,IAAA,CAAK3C,EAAL,CAAQ+B,qBAAR,EAAb,CAAA;EACA,MAAA,IAAMjG,CAAC,GAAGkH,OAAO,GAAGL,IAAI,CAACI,IAAzB,CAAA;EACA,MAAA,IAAMhH,CAAC,GAAGoH,OAAO,GAAGR,IAAI,CAACO,GAAzB,CAAA;EACA,MAAA,IAAMmB,CAAC,GAAG,IAAKW,CAAAA,SAAL,CAAeX,CAAzB,CAAA;EAEA,MAAA,IAAA,CAAKY,KAAL,GAAa;UAAEnJ,CAAC,EAAEA,CAAC,GAAGuI,CAAT;UAAYtI,CAAC,EAAEA,CAAC,GAAGsI,CAAAA;SAAhC,CAAA;EACA,MAAA,IAAA,CAAK5E,OAAL,CAAa,WAAb,qBAA+B,IAAKwF,CAAAA,KAApC,GARyB;EAS5B,KAAA;EA/CL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAiDI,SAAU,OAAA,GAAA;QACN,IAAKC,CAAAA,cAAL,GAA2BC,cAAA,CAAA,EAAA,EAAA,IAAA,CAAKH,SAAhC,CAAA,CAAA;EACH,KAAA;EAnDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAqDI,SAAYI,WAAAA,CAAAA,EAAZ,EAAwBC,EAAxB,EAAoC;EAChC,MAAA,IAAI,KAAKZ,KAAL,CAAWT,WAAf,EAA4B,OADI;;EAEhC,MAAA,IAAI,KAAKkB,cAAT,EAAyB,KAAKI,SAAL,CAAe,KAAKJ,cAAL,CAAoBpJ,CAApB,GAAwBsJ,EAAvC,EAA2C,IAAA,CAAKF,cAAL,CAAoBnJ,CAApB,GAAwBsJ,EAAnE,CAAA,CAAA;EAC5B,KAAA;EAxDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KA0DI,EAAA,SAAA,MAAA,CAAOxD,KAAP,EAAsBiB,EAAtB,EAAkCG,EAAlC,EAA8CsC,MAA9C,EAAkE;EAC9D,MAAA,IAAA,CAAKzD,IAAL,CAAU,IAAKkD,CAAAA,SAAL,CAAeX,CAAf,IAAoB,CAAIxC,GAAAA,KAAxB,CAAV,EAA0CiB,EAA1C,EAA8CG,EAA9C,EAAkDsC,MAAlD,CAAA,CAAA;EAEA,MAAA,IAAA,CAAKT,MAAL,EAAA,CAAA;EACH,KAAA;EA9DL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAgEI,SAAUhJ,SAAAA,CAAAA,CAAV,EAAqBC,CAArB,EAAgC;EAC5B,MAAA,IAAMqB,MAAM,GAAG;UAAE4H,SAAS,EAAE,KAAKA,SAAlB;EAA6BlJ,QAAAA,CAAC,EAADA,CAA7B;EAAgCC,QAAAA,CAAC,EAADA,CAAAA;SAA/C,CAAA;QAEA,IAAI,CAAC,KAAK0D,OAAL,CAAa,WAAb,EAA0BrC,MAA1B,CAAL,EAAwC,OAAA;EAExC,MAAA,IAAA,CAAK4H,SAAL,CAAelJ,CAAf,GAAmBsB,MAAM,CAACtB,CAA1B,CAAA;EACA,MAAA,IAAA,CAAKkJ,SAAL,CAAejJ,CAAf,GAAmBqB,MAAM,CAACrB,CAA1B,CAAA;EAEA,MAAA,IAAA,CAAK+I,MAAL,EAAA,CAAA;QACA,IAAKrF,CAAAA,OAAL,CAAa,YAAb,CAAA,CAAA;EACH,KAAA;EA1EL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KA4EI,EAAA,SAAA,IAAA,CAAKqC,KAAL,EAAuD;QAAA,IAApCgB,EAAoC,uEAA/B,CAA+B,CAAA;QAAA,IAA5BG,EAA4B,uEAAvB,CAAuB,CAAA;EAAA,MAAA,IAApBsC,MAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA;EACnD,MAAA,IAAMlB,CAAC,GAAG,IAAKW,CAAAA,SAAL,CAAeX,CAAzB,CAAA;EACA,MAAA,IAAMjH,MAAM,GAAG;UAAE4H,SAAS,EAAE,KAAKA,SAAlB;EAA6BlD,QAAAA,IAAI,EAAJA,KAA7B;EAAmCyD,QAAAA,MAAM,EAANA,MAAAA;SAAlD,CAAA;QAEA,IAAI,CAAC,KAAK9F,OAAL,CAAa,MAAb,EAAqBrC,MAArB,CAAL,EAAmC,OAAA;EAEnC,MAAA,IAAMoI,CAAC,GAAG,CAACnB,CAAC,GAAGjH,MAAM,CAAC0E,IAAZ,KAAsBuC,CAAC,GAAGvC,KAAL,IAAc,CAAnC,CAAV,CAAA;QAEA,IAAKkD,CAAAA,SAAL,CAAeX,CAAf,GAAmBjH,MAAM,CAAC0E,IAAP,IAAe,CAAlC,CAAA;EACA,MAAA,IAAA,CAAKkD,SAAL,CAAelJ,CAAf,IAAoBgH,EAAE,GAAG0C,CAAzB,CAAA;EACA,MAAA,IAAA,CAAKR,SAAL,CAAejJ,CAAf,IAAoBkH,EAAE,GAAGuC,CAAzB,CAAA;EAEA,MAAA,IAAA,CAAKV,MAAL,EAAA,CAAA;QACA,IAAKrF,CAAAA,OAAL,CAAa,QAAb,EAAuB;EAAE8F,QAAAA,MAAM,EAANA,MAAAA;SAAzB,CAAA,CAAA;EACH,KAAA;EA1FL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KA4FI,EAAA,SAAA,WAAA,CAAYvF,EAAZ,EAA6B;EACzB,MAAA,IAAA,CAAKA,EAAL,CAAQyF,WAAR,CAAoBzF,EAApB,CAAA,CAAA;EACH,KAAA;EA9FL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAgGI,EAAA,SAAA,WAAA,CAAYA,EAAZ,EAA6B;EACzB,MAAA,IAAA,CAAKA,EAAL,CAAQ0F,WAAR,CAAoB1F,EAApB,CAAA,CAAA;EACH,KAAA;EAlGL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,IAAA,CAAA;EAAA,CAAA,CAA0BpD,OAA1B,CAAA;;ECJA,IAAa+I,cAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,cAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,cAAA,CAAA,CAAA;;EAOI,EAAA,SAAA,cAAA,CAAY9H,UAAZ,EAAoC+H,SAApC,EAAyDC,UAAzD,EAA+EzB,OAA/E,EAA8G;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;;EAC1G,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAN,CAAA,CAAA;;EAD0G,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAE1G,KAAKvG,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;MACA,KAAK+H,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;MACA,KAAKC,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;EAEA,IAAA,KAAA,CAAK7F,EAAL,GAAUsE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV,CAAA;EACA,IAAA,KAAA,CAAKvE,EAAL,CAAQc,KAAR,CAAcnF,QAAd,GAAyB,UAAzB,CAAA;EACA,IAAA,KAAA,CAAKqE,EAAL,CAAQc,KAAR,CAAcgF,MAAd,GAAuB,IAAvB,CAAA;;MAEA,KAAKrG,CAAAA,OAAL,CAAa,kBAAb,EAAiC;QAC7BO,EAAE,EAAE,MAAKA,EADoB;QAE7BnC,UAAU,EAAE,MAAKA,UAFY;QAG7BkI,MAAM,EAAE,MAAKC,SAAL,EAAA;OAHZ,CAAA,CAAA;;EAV0G,IAAA,OAAA,KAAA,CAAA;EAe7G,GAAA;;EAtBL,EAAA,YAAA,CAAA,cAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAwBI,SAAY,SAAA,GAAA;EACR,MAAA,IAAA,gBAAA,GAA0B,KAAKnI,UAA/B;YAAQrD,KAAR,oBAAQA,KAAR;YAAeI,MAAf,oBAAeA,MAAf,CAAA;;EAEA,MAAA,IAAI,IAAKgL,CAAAA,SAAL,CAAeK,SAAf,CAAyBzL,KAAzB,CAAA,IAAmC,IAAKqL,CAAAA,UAAL,CAAgBI,SAAhB,CAA0BrL,MAA1B,CAAvC,EAA0E;EACtE,QAAA,IAAA,qBAAA,GAAiB,KAAKiL,UAAL,CAAgBK,iBAAhB,CAAkCtL,MAAlC,CAAjB;EAAA,YAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;EAAA,YAAOyI,EAAP,GAAA,sBAAA,CAAA,CAAA,CAAA;EAAA,YAAWC,EAAX,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;;EACA,QAAA,IAAA,qBAAA,GAAiB,KAAKsC,SAAL,CAAeM,iBAAf,CAAiC1L,KAAjC,CAAjB;EAAA,YAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;EAAA,YAAO+I,EAAP,GAAA,sBAAA,CAAA,CAAA,CAAA;EAAA,YAAWC,EAAX,GAAA,sBAAA,CAAA,CAAA,CAAA,CAAA;;UAEA,OAAO,CAACH,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,CAAP,CAAA;EACH,OAAA;;QAED,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP,CAAA;EACH,KAAA;EAnCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAqCI,SAAS,MAAA,GAAA;QACL,IAAK/D,CAAAA,OAAL,CAAa,kBAAb,EAAiC;UAC7BO,EAAE,EAAE,KAAKA,EADoB;UAE7BnC,UAAU,EAAE,KAAKA,UAFY;UAG7BkI,MAAM,EAAE,KAAKC,SAAL,EAAA;SAHZ,CAAA,CAAA;EAKH,KAAA;EA3CL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,cAAA,CAAA;EAAA,CAAA,CAAoCpJ,OAApC,CAAA;;ECDA,IAAauJ,WAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,WAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,WAAA,CAAA,CAAA;;EAEI,EAAA,SAAA,WAAA,CAAYnG,EAAZ,EAA6B5F,OAA7B,EAA+CgK,OAA/C,EAA8E;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;;EAC1E,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAN,CAAA,CAAA;;MACA,KAAK3E,CAAAA,OAAL,CAAa,eAAb,EAA8B;EAAEO,MAAAA,EAAE,EAAFA,EAAF;EAAM5F,MAAAA,OAAO,EAAPA,OAAAA;OAApC,CAAA,CAAA;;EAF0E,IAAA,OAAA,KAAA,CAAA;EAG7E,GAAA;;EALL,EAAA,OAAA,YAAA,CAAA,WAAA,CAAA,CAAA;EAAA,CAAA,CAAiCwC,OAAjC,CAAA;;ECEA,IAAawJ,UAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,UAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,UAAA,CAAA,CAAA;;IAOI,SAAYpG,UAAAA,CAAAA,EAAZ,EAA6BqG,IAA7B,EAA2CjL,EAA3C,EAAmDT,IAAnD,EAA+DyJ,OAA/D,EAA8F;EAAA,IAAA,IAAA,aAAA,CAAA;;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;;EAC1F,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAN,CAAA,CAAA;;EAD0F,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAE1F,KAAKpE,CAAAA,EAAL,GAAUA,EAAV,CAAA;MACA,KAAKqG,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACA,KAAKjL,CAAAA,EAAL,GAAUA,EAAV,CAAA;MACA,KAAKT,CAAAA,IAAL,GAAYA,IAAZ,CAAA;;MAEA,KAAK8E,CAAAA,OAAL,CAAa,cAAb,GAAA,aAAA,GAAA;EAA+BO,MAAAA,EAAE,EAAFA,EAAAA;EAA/B,KAAA,EAAA,eAAA,CAAA,aAAA,EAAoCqG,IAApC,EAA2C,KAAA,CAAKjL,EAAhD,CAA4DA,EAAAA,eAAAA,CAAAA,aAAAA,EAAAA,QAAAA,EAAAA,EAAE,CAACsC,MAA/D,CAAA,EAAA,aAAA,EAAA,CAAA;;EAP0F,IAAA,OAAA,KAAA,CAAA;EAQ7F,GAAA;;EAfL,EAAA,YAAA,CAAA,UAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAiBI,EAAA,SAAA,WAAA,CAAA,IAAA,EAAkD4I,UAAlD,EAA6F;QAAA,IAA/E3K,QAA+E,QAA/EA,QAA+E,CAAA;EACzF,MAAA,IAAQqE,EAAR,GAAe,IAAf,CAAQA,EAAR,CAAA;;EACA,MAAA,IAAA,UAAA,GAAiBD,SAAS,CAACC,EAAD,EAAKsG,UAAL,CAA1B;YAAQxK,CAAR,cAAQA,CAAR;YAAWC,CAAX,cAAWA,CAAX,CAAA;;QAEA,OAAO,CAACJ,QAAQ,CAAC,CAAD,CAAR,GAAcG,CAAd,GAAkBkE,EAAE,CAACiC,WAAH,GAAiB,CAApC,EAAuCtG,QAAQ,CAAC,CAAD,CAAR,GAAcI,CAAd,GAAkBiE,EAAE,CAACuG,YAAH,GAAkB,CAA3E,CAAP,CAAA;EACH,KAAA;EAtBL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,UAAA,CAAA;EAAA,CAAA,CAAgC3J,OAAhC,CAAA;;ECIA,IAAa4J,QAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,QAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,QAAA,CAAA,CAAA;;EAWI,EAAA,SAAA,QAAA,CAAY7L,IAAZ,EAAwB6E,SAAxB,EAA8C4E,OAA9C,EAA6E;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;;EACzE,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAN,CAAA,CAAA;;EADyE,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAAA,eAPnE,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAAA,IAAI1K,GAAJ,EAOmE,CAAA,CAAA;;MAAA,eANlE,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,IAAIA,GAAJ,EAMkE,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAH1C,EAG0C,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAGzE,KAAKiB,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACA,KAAK6E,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;EACA,IAAA,KAAA,CAAKQ,EAAL,GAAUsE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV,CAAA;EACA,IAAA,KAAA,CAAKvE,EAAL,CAAQc,KAAR,CAAcnF,QAAd,GAAyB,UAAzB,CAAA;;EAEA,IAAA,KAAA,CAAKqE,EAAL,CAAQH,gBAAR,CAAyB,aAAzB,EAAwC,UAAAtC,CAAC,EAAA;EAAA,MAAA,OAAI,KAAKkC,CAAAA,OAAL,CAAa,aAAb,EAA4B;EAAElC,QAAAA,CAAC,EAADA,CAAF;EAAK5C,QAAAA,IAAI,EAAE,KAAKA,CAAAA,IAAAA;EAAhB,OAA5B,CAAJ,CAAA;OAAzC,CAAA,CAAA;;MAEA,KAAKgK,CAAAA,KAAL,GAAa,IAAIrE,IAAJ,CAAS,KAAKN,CAAAA,EAAd,EAAkB,KAAKO,CAAAA,WAAL,CAAiBU,IAAjB,CAAA,sBAAA,CAAA,KAAA,CAAA,CAAlB,EAA+C,KAAKwF,CAAAA,QAAL,CAAcxF,IAAd,CAAA,sBAAA,CAAA,KAAA,CAAA,CAA/C,EAAyE,YAAM;EACxF,MAAA,KAAA,CAAKxB,OAAL,CAAa,YAAb,EAA2B9E,IAA3B,CAAA,CAAA;;EACA,MAAA,KAAA,CAAK8E,OAAL,CAAa,aAAb,EAA4B9E,IAA5B,CAAA,CAAA;EACH,KAHY,CAAb,CAAA;;MAKA,KAAK8E,CAAAA,OAAL,CAAa,YAAb,EAA2B;QACvBO,EAAE,EAAE,MAAKA,EADc;EAEvBrF,MAAAA,IAAI,EAAJA,IAFuB;QAGvB6E,SAAS,EAAEA,SAAS,CAAC9D,IAHE;EAIvBgL,MAAAA,UAAU,EAAE,KAAA,CAAKA,UAAL,CAAgBzF,IAAhB,CAJW,sBAAA,CAAA,KAAA,CAAA,CAAA;EAKvB0F,MAAAA,WAAW,EAAE,KAAA,CAAKA,WAAL,CAAiB1F,IAAjB,CAAA,sBAAA,CAAA,KAAA,CAAA,CAAA;OALjB,CAAA,CAAA;;EAQA,IAAA,KAAA,CAAK6D,MAAL,EAAA,CAAA;;EAvByE,IAAA,OAAA,KAAA,CAAA;EAwB5E,GAAA;;EAnCL,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EAqCI,SAAe,YAAA,GAAA;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EACX,MAAA,IAAM/J,GAAS,GAAQ,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAKJ,IAAL,CAAUF,MAAV,CAAiBO,MAAjB,EAAR,CAAA,EAAA,kBAAA,CAAsC,KAAKL,IAAL,CAAUE,OAAV,CAAkBG,MAAlB,EAAtC,CAAf,CAAA,CAAA;EAEA,MAAA,IAAA,CAAK4L,OAAL,CAAa1J,OAAb,CAAqB,UAAA2J,CAAC,EAAI;EACtB,QAAA,IAAI,CAAC9L,GAAG,CAAC+L,QAAJ,CAAaD,CAAC,CAACzL,EAAf,CAAL,EAAyB,MAAI,CAACwL,OAAL,CAAoBC,QAAAA,CAAAA,CAAAA,CAAC,CAACzL,EAAtB,CAAA,CAAA;SAD7B,CAAA,CAAA;EAGH,KAAA;EA3CL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EA6CI,oBAAW4E,EAAX,EAA4BqG,IAA5B,EAA0CjL,EAA1C,EAAkD;EAC9C,MAAA,IAAA,CAAK2L,YAAL,EAAA,CAAA;EACA,MAAA,IAAA,CAAKH,OAAL,CAAazM,GAAb,CAAiBiB,EAAjB,EAAqB,IAAIgL,UAAJ,CAAepG,EAAf,EAAmBqG,IAAnB,EAAyBjL,EAAzB,EAA6B,KAAKT,IAAlC,EAAwC,IAAxC,CAArB,CAAA,CAAA;EACH,KAAA;EAhDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAkDI,SAAYqF,WAAAA,CAAAA,EAAZ,EAA6B5F,OAA7B,EAA+C;EAC3C,MAAA,IAAA,CAAKE,QAAL,CAAcH,GAAd,CAAkBC,OAAlB,EAA2B,IAAI+L,WAAJ,CAAgBnG,EAAhB,EAAoB5F,OAApB,EAA6B,IAA7B,CAA3B,CAAA,CAAA;EACH,KAAA;EApDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAsDI,EAAA,SAAA,SAAA,CAAUgB,EAAV,EAAkB;EACd,MAAA,OAAO,KAAKwL,OAAL,CAAa5M,GAAb,CAAiBoB,EAAjB,CAAP,CAAA;EACH,KAAA;EAxDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;MAAA,KA0DI,EAAA,SAAA,iBAAA,CAAkBA,EAAlB,EAA0B;QACtB,IAAMsC,MAAM,GAAG,IAAKkJ,CAAAA,OAAL,CAAaI,GAAb,CAAiB5L,EAAjB,CAAf,CAAA;EAEA,MAAA,IAAI,CAACsC,MAAL,EAAa,MAAM,IAAIxD,KAAJ,CAAA,uBAAA,CAAA,MAAA,CAAkCkB,EAAE,CAAC5B,IAArC,EAAA,YAAA,CAAA,CAAA,MAAA,CAAsD4B,EAAE,CAACnB,GAAzD,CAAN,CAAA,CAAA;QAEb,OAAOyD,MAAM,CAACuJ,WAAP,CAAmB,KAAKtM,IAAxB,EAA8B,IAAKqF,CAAAA,EAAnC,CAAP,CAAA;EACH,KAAA;EAhEL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAkEI,EAAA,SAAA,QAAA,CAASzC,CAAT,EAAwB;EACpB,MAAA,IAAM2J,OAAO,GAAG;UAAEvM,IAAI,EAAE,KAAKA,IAAb;UAAmBwM,UAAU,EAAE5J,CAAC,CAAC6J,OAAjC;EAA0C7J,QAAAA,CAAC,EAADA,CAAAA;SAA1D,CAAA;EAEA,MAAA,IAAA,CAAKoD,OAAL,EAAA,CAAA;EACA,MAAA,IAAA,CAAKlB,OAAL,CAAa,iBAAb,EAAgCyH,OAAhC,CAAA,CAAA;EACA,MAAA,IAAA,CAAKzH,OAAL,CAAa,YAAb,EAA2ByH,OAA3B,CAAA,CAAA;EACH,KAAA;EAxEL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EA0EI,SAAU,OAAA,GAAA;EACN,MAAA,IAAA,CAAKhC,cAAL,GAAA,kBAAA,CAA0B,IAAKvK,CAAAA,IAAL,CAAUgB,QAApC,CAAA,CAAA;EACH,KAAA;EA5EL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EA8EI,SAAYyJ,WAAAA,CAAAA,EAAZ,EAAwBC,EAAxB,EAAoC;QAChC,IAAK5F,CAAAA,OAAL,CAAa,eAAb,EAA8B;UAAE9E,IAAI,EAAE,KAAKA,IAAb;EAAmByK,QAAAA,EAAE,EAAFA,EAAnB;EAAuBC,QAAAA,EAAE,EAAFA,EAAAA;SAArD,CAAA,CAAA;EACH,KAAA;EAhFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAkFI,SAAOD,MAAAA,CAAAA,EAAP,EAAmBC,EAAnB,EAA+B;EAC3B,MAAA,IAAMvJ,CAAC,GAAG,IAAA,CAAKoJ,cAAL,CAAoB,CAApB,IAAyBE,EAAnC,CAAA;EACA,MAAA,IAAMrJ,CAAC,GAAG,IAAA,CAAKmJ,cAAL,CAAoB,CAApB,IAAyBG,EAAnC,CAAA;EAEA,MAAA,IAAA,CAAKC,SAAL,CAAexJ,CAAf,EAAkBC,CAAlB,CAAA,CAAA;EACH,KAAA;EAvFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAyFI,SAAUD,SAAAA,CAAAA,CAAV,EAAqBC,CAArB,EAAgC;QAC5B,IAAMpB,IAAI,GAAG,IAAA,CAAKA,IAAlB,CAAA;EACA,MAAA,IAAMyC,MAAM,GAAG;EAAEzC,QAAAA,IAAI,EAAJA,IAAF;EAAQmB,QAAAA,CAAC,EAADA,CAAR;EAAWC,QAAAA,CAAC,EAADA,CAAAA;SAA1B,CAAA;QAEA,IAAI,CAAC,KAAK0D,OAAL,CAAa,eAAb,EAA8BrC,MAA9B,CAAL,EAA4C,OAAA;;QAE5C,IAAiBzC,cAAAA,GAAAA,cAAAA,CAAAA,IAAI,CAACgB,QAAtB,EAAA,CAAA,CAAA;EAAA,UAAO0L,EAAP,GAAA,cAAA,CAAA,CAAA,CAAA;EAAA,UAAWC,EAAX,GAAA,cAAA,CAAA,CAAA,CAAA,CAAA;;EACA,MAAA,IAAMC,IAAsB,GAAG,CAACF,EAAD,EAAKC,EAAL,CAA/B,CAAA;EAEA3M,MAAAA,IAAI,CAACgB,QAAL,CAAc,CAAd,CAAmByB,GAAAA,MAAM,CAACtB,CAA1B,CAAA;EACAnB,MAAAA,IAAI,CAACgB,QAAL,CAAc,CAAd,CAAmByB,GAAAA,MAAM,CAACrB,CAA1B,CAAA;EAEA,MAAA,IAAA,CAAK+I,MAAL,EAAA,CAAA;QACA,IAAKrF,CAAAA,OAAL,CAAa,gBAAb,EAA+B;EAAE9E,QAAAA,IAAI,EAAJA,IAAF;EAAQ4M,QAAAA,IAAI,EAAJA,IAAAA;SAAvC,CAAA,CAAA;EACH,KAAA;EAvGL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAyGI,SAAS,MAAA,GAAA;QACL,IAAe,mBAAA,GAAA,cAAA,CAAA,IAAA,CAAK5M,IAAL,CAAUgB,QAAzB,EAAA,CAAA,CAAA;EAAA,UAAOG,CAAP,GAAA,mBAAA,CAAA,CAAA,CAAA;EAAA,UAAUC,CAAV,GAAA,mBAAA,CAAA,CAAA,CAAA,CAAA;;QAEA,IAAKiE,CAAAA,EAAL,CAAQc,KAAR,CAAckE,SAAd,GAAuClJ,YAAAA,CAAAA,MAAAA,CAAAA,CAAvC,iBAA+CC,CAA/C,EAAA,KAAA,CAAA,CAAA;EACH,KAAA;EA7GL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EA+GI,kBAAS,EAER;EAjHL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAmHI,SAAU,OAAA,GAAA;QACN,IAAK4I,CAAAA,KAAL,CAAWrD,OAAX,EAAA,CAAA;EACH,KAAA;EArHL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,QAAA,CAAA;EAAA,CAAA,CAA8B1E,OAA9B,CAAA;;ECAA,IAAa4K,UAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,UAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,UAAA,CAAA,CAAA;;EAQI;EACA,EAAA,SAAA,UAAA,CAAYrF,SAAZ,EAAoC/C,UAApC,EAAwEgF,OAAxE,EAAuG;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;;EACnG,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,OAAN,CAAA,CAAA;;EADmG,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAAA,eAL/F,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAAA,IAAI1K,GAAJ,EAK+F,CAAA,CAAA;;MAAA,eAJzF,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAAA,IAAIA,GAAJ,EAIyF,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAGnG,KAAKyI,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;MACA,KAAK/C,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;EAEA,IAAA,KAAA,CAAK+C,SAAL,CAAerB,KAAf,CAAqB2G,QAArB,GAAgC,QAAhC,CAAA;;MAEA,KAAKtF,CAAAA,SAAL,CAAetC,gBAAf,CAAgC,OAAhC,EAAyC,KAAK6H,CAAAA,KAAL,CAAWzG,IAAX,CAAzC,sBAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;EACA,IAAA,KAAA,CAAKkB,SAAL,CAAetC,gBAAf,CAAgC,aAAhC,EAA+C,UAAAtC,CAAC,EAAA;EAAA,MAAA,OAAI,KAAKkC,CAAAA,OAAL,CAAa,aAAb,EAA4B;EAAElC,QAAAA,CAAC,EAADA,CAAF;UAAKoK,IAAI,EAAA,sBAAA,CAAA,KAAA,CAAA;EAAT,OAA5B,CAAJ,CAAA;OAAhD,CAAA,CAAA;;EACAvD,IAAAA,OAAO,CAACQ,EAAR,CAAW,SAAX,EAAsBlF,YAAY,CAAC,QAAD,EAAW,KAAKkI,CAAAA,MAAL,CAAY3G,IAAZ,+BAAX,CAAlC,CAAA,CAAA;EACAmD,IAAAA,OAAO,CAACQ,EAAR,CAAW,SAAX,EAAsB,YAAA;EAAA,MAAA,OAAM,MAAKpG,KAAL,CAAWtB,OAAX,CAAmB,UAAAyK,IAAI,EAAA;UAAA,OAAIA,IAAI,CAACrG,OAAL,EAAJ,CAAA;EAAA,OAAvB,CAAN,CAAA;OAAtB,CAAA,CAAA;;MAEA,KAAKsD,CAAAA,EAAL,CAAQ,gBAAR,EAA0B,MAAKiD,iBAAL,CAAuB5G,IAAvB,CAA1B,sBAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;EACA,IAAA,KAAA,CAAK2D,EAAL,CAAQ,cAAR,EAAwB,UAAuB,IAAA,EAAA;QAAA,IAApBpK,KAAoB,QAApBA,KAAoB;YAAbI,MAAa,QAAbA,MAAa,CAAA;QAC3C,IAAMK,WAAW,GAAGK,KAAK,CAACC,IAAN,CAAW,KAAA,CAAKN,WAAL,CAAiB6M,OAAjB,EAAX,CAApB,CAAA;EACA,MAAA,IAAMC,kBAAkB,GAAG9M,WAAW,CAACiJ,MAAZ,CAAmB,UAAkB,KAAA,EAAA;EAAA,QAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;EAAA,YAAhBrG,UAAgB,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;;UAC5D,OAAOA,UAAU,CAACrD,KAAX,KAAqBA,KAArB,IAA8BqD,UAAU,CAACjD,MAAX,KAAsBA,MAA3D,CAAA;EACH,OAF0B,CAA3B,CAAA;QAIAmN,kBAAkB,CAAC7K,OAAnB,CAA2B,UAAA,KAAA,EAAA;EAAA,QAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA;EAAA,YAAA,KAAA,CAAA,CAAA,CAAA,CAAA;EAAA,gBAAKyK,IAAL,GAAA,KAAA,CAAA,CAAA,EAAA;;EAAA,QAAA,OAAeK,qBAAqB,CAAC,YAAA;YAAA,OAAML,IAAI,CAAC7C,MAAL,EAAN,CAAA;EAAA,SAAD,CAApC,CAAA;SAA3B,CAAA,CAAA;OANJ,CAAA,CAAA;;EASA,IAAA,KAAA,CAAKmD,IAAL,GAAY,IAAI9D,IAAJ,CAAShC,SAAT,EAAZ,sBAAA,CAAA,KAAA,CAAA,CAAA,CAAA;;EACA,IAAA,KAAA,CAAKA,SAAL,CAAesD,WAAf,CAA2B,KAAKwC,CAAAA,IAAL,CAAUjI,EAArC,CAAA,CAAA;;EAxBmG,IAAA,OAAA,KAAA,CAAA;EAyBtG,GAAA;;EAlCL,EAAA,YAAA,CAAA,UAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KAoCI,EAAA,SAAA,OAAA,CAAQrF,IAAR,EAAoB;QAChB,IAAM6E,SAAS,GAAG,IAAA,CAAKJ,UAAL,CAAgB4H,GAAhB,CAAoBrM,IAAI,CAACnB,IAAzB,CAAlB,CAAA;QAEA,IAAI,CAACgG,SAAL,EAAgB,MAAM,IAAItF,KAAJ,CAAuBS,YAAAA,CAAAA,MAAAA,CAAAA,IAAI,CAACnB,IAA5B,EAAN,YAAA,CAAA,CAAA,CAAA;QAEhB,IAAM0O,QAAQ,GAAG,IAAI1B,QAAJ,CAAa7L,IAAb,EAAmB6E,SAAnB,EAA8B,IAA9B,CAAjB,CAAA;EAEA,MAAA,IAAA,CAAKhB,KAAL,CAAWrE,GAAX,CAAeQ,IAAf,EAAqBuN,QAArB,CAAA,CAAA;EACA,MAAA,IAAA,CAAKD,IAAL,CAAUxC,WAAV,CAAsByC,QAAQ,CAAClI,EAA/B,CAAA,CAAA;EACH,KAAA;EA7CL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KA+CI,EAAA,SAAA,UAAA,CAAWrF,IAAX,EAAuB;QACnB,IAAMuN,QAAQ,GAAG,IAAK1J,CAAAA,KAAL,CAAWwI,GAAX,CAAerM,IAAf,CAAjB,CAAA;QAEA,IAAK6D,CAAAA,KAAL,WAAkB7D,IAAlB,CAAA,CAAA;;EACA,MAAA,IAAIuN,QAAJ,EAAc;EACV,QAAA,IAAA,CAAKD,IAAL,CAAUvC,WAAV,CAAsBwC,QAAQ,CAAClI,EAA/B,CAAA,CAAA;EACAkI,QAAAA,QAAQ,CAAC5G,OAAT,EAAA,CAAA;EACH,OAAA;EACJ,KAAA;EAvDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAyDI,EAAA,SAAA,aAAA,CAAczD,UAAd,EAAsC;EAClC,MAAA,IAAI,CAACA,UAAU,CAACrD,KAAX,CAAiBG,IAAlB,IAA0B,CAACkD,UAAU,CAACjD,MAAX,CAAkBD,IAAjD,EACI,MAAM,IAAIT,KAAJ,CAAU,8CAAV,CAAN,CAAA;EAEJ,MAAA,IAAMiO,SAAS,GAAG,IAAK3J,CAAAA,KAAL,CAAWwI,GAAX,CAAenJ,UAAU,CAACrD,KAAX,CAAiBG,IAAhC,CAAlB,CAAA;EACA,MAAA,IAAMyN,UAAU,GAAG,IAAK5J,CAAAA,KAAL,CAAWwI,GAAX,CAAenJ,UAAU,CAACjD,MAAX,CAAkBD,IAAjC,CAAnB,CAAA;QAEA,IAAI,CAACwN,SAAD,IAAc,CAACC,UAAnB,EACI,MAAM,IAAIlO,KAAJ,CAAU,yCAAV,CAAN,CAAA;EAEJ,MAAA,IAAMmO,QAAQ,GAAG,IAAI1C,cAAJ,CAAmB9H,UAAnB,EAA+BsK,SAA/B,EAA0CC,UAA1C,EAAsD,IAAtD,CAAjB,CAAA;EAEA,MAAA,IAAA,CAAKnN,WAAL,CAAiBd,GAAjB,CAAqB0D,UAArB,EAAiCwK,QAAjC,CAAA,CAAA;EACA,MAAA,IAAA,CAAKJ,IAAL,CAAUxC,WAAV,CAAsB4C,QAAQ,CAACrI,EAA/B,CAAA,CAAA;EACH,KAAA;EAvEL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KAyEI,EAAA,SAAA,gBAAA,CAAiBnC,UAAjB,EAAyC;QACrC,IAAMwK,QAAQ,GAAG,IAAKpN,CAAAA,WAAL,CAAiB+L,GAAjB,CAAqBnJ,UAArB,CAAjB,CAAA;QAEA,IAAK5C,CAAAA,WAAL,WAAwB4C,UAAxB,CAAA,CAAA;QACA,IAAIwK,QAAJ,EACI,IAAKJ,CAAAA,IAAL,CAAUvC,WAAV,CAAsB2C,QAAQ,CAACrI,EAA/B,CAAA,CAAA;EACP,KAAA;EA/EL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;EAAA,IAAA,KAAA,EAiFI,SAA4C,iBAAA,CAAA,KAAA,EAAA;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;QAAA,IAAxBrF,IAAwB,SAAxBA,IAAwB,CAAA;EACxCA,MAAAA,IAAI,CAAC2N,cAAL,EAAA,CAAsBpL,OAAtB,CAA8B,UAAAqL,IAAI,EAAI;UAClC,IAAMF,QAAQ,GAAG,MAAI,CAACpN,WAAL,CAAiB+L,GAAjB,CAAqBuB,IAArB,CAAjB,CAAA;;UAEA,IAAI,CAACF,QAAL,EAAe,MAAM,IAAInO,KAAJ,CAAU,2BAAV,CAAN,CAAA;EAEfmO,QAAAA,QAAQ,CAACvD,MAAT,EAAA,CAAA;SALJ,CAAA,CAAA;EAOH,KAAA;EAzFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EA2FI,SAAS,MAAA,GAAA;EACL,MAAA,IAAQ3C,SAAR,GAAsB,IAAtB,CAAQA,SAAR,CAAA;QAEA,IAAI,CAACA,SAAS,CAACqG,aAAf,EACI,MAAM,IAAItO,KAAJ,CAAU,wCAAV,CAAN,CAAA;EAEJ,MAAA,IAAM8H,KAAK,GAAGG,SAAS,CAACqG,aAAV,CAAwBC,WAAtC,CAAA;EACA,MAAA,IAAMC,MAAM,GAAGvG,SAAS,CAACqG,aAAV,CAAwBG,YAAvC,CAAA;EAEAxG,MAAAA,SAAS,CAACrB,KAAV,CAAgBkB,KAAhB,GAAwBA,KAAK,GAAG,IAAhC,CAAA;EACAG,MAAAA,SAAS,CAACrB,KAAV,CAAgB4H,MAAhB,GAAyBA,MAAM,GAAG,IAAlC,CAAA;EACH,KAAA;EAtGL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;MAAA,KAwGI,EAAA,SAAA,KAAA,CAAMnL,CAAN,EAAgB;QACZ,IAAM4E,SAAS,GAAG,IAAA,CAAKA,SAAvB,CAAA;EAEA,MAAA,IAAIA,SAAS,KAAK5E,CAAC,CAACqL,MAApB,EAA4B,OAAA;EAC5B,MAAA,IAAI,CAAC,IAAA,CAAKnJ,OAAL,CAAa,OAAb,EAAsB;EAAElC,QAAAA,CAAC,EAADA,CAAF;EAAK4E,QAAAA,SAAS,EAATA,SAAAA;EAAL,OAAtB,CAAL,EAA8C,OAAA;EACjD,KAAA;EA7GL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,UAAA,CAAA;EAAA,CAAA,CAAgCvF,OAAhC,CAAA;;ECRA,IAAaiM,QAAb,gBAAA,YAAA;EAAA,EAAA,SAAA,QAAA,GAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAEmB,EAFnB,CAAA,CAAA;EAAA,GAAA;;EAAA,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,KAAA;MAAA,KAII,EAAA,SAAA,GAAA,CAAI/O,IAAJ,EAAoC;QAAA,IAApBqN,UAAoB,uEAAP,KAAO,CAAA;QAChC,IAAI,CAACA,UAAL,EACI,IAAKtN,CAAAA,IAAL,GAAY,CAACC,IAAD,CAAZ,CADJ,KAEK,IAAI,CAAC,IAAKgP,CAAAA,QAAL,CAAchP,IAAd,CAAL,EACD,KAAKD,IAAL,CAAUsD,IAAV,CAAerD,IAAf,CAAA,CAAA;EACP,KAAA;EATL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAWI,SAAQ,KAAA,GAAA;QACJ,IAAKD,CAAAA,IAAL,GAAY,EAAZ,CAAA;EACH,KAAA;EAbL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAeI,EAAA,SAAA,MAAA,CAAOC,IAAP,EAAmB;EACf,MAAA,IAAA,CAAKD,IAAL,CAAUiE,MAAV,CAAiB,IAAKjE,CAAAA,IAAL,CAAUkE,OAAV,CAAkBjE,IAAlB,CAAjB,EAA0C,CAA1C,CAAA,CAAA;EACH,KAAA;EAjBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAmBI,EAAA,SAAA,QAAA,CAASA,IAAT,EAAqB;QACjB,OAAO,IAAA,CAAKD,IAAL,CAAUkE,OAAV,CAAkBjE,IAAlB,CAAA,KAA4B,CAAC,CAApC,CAAA;EACH,KAAA;EArBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KAuBI,EAAA,SAAA,IAAA,CAAKiP,QAAL,EAAiD;EAC7C,MAAA,IAAA,CAAKlP,IAAL,CAAUqD,OAAV,CAAkB6L,QAAlB,CAAA,CAAA;EACH,KAAA;EAzBL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,QAAA,CAAA;EAAA,CAAA,EAAA;;ECAA,IAAaC,MAAb,gBAAA,YAAA,CAII,SAAYlM,MAAAA,CAAAA,QAAZ,EAA0B;EAAA,EAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;EAAA,EAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EACtB,EAAA,IAAA,CAAKA,QAAL,GAAAqI,cAAA,CAAA;EACI8D,IAAAA,IAAI,EAAE,CAACC,OAAO,CAACD,IAAT,CADV;EAEIE,IAAAA,KAAK,EAAE,CAACD,OAAO,CAACC,KAAT,CAFX;EAGIC,IAAAA,iBAAiB,EAAE,EAHvB;EAII9H,IAAAA,OAAO,EAAE,EAAA;EAJb,GAAA,EAKOxE,QALP,CAAA,CAAA;EAOH,CAZL,CAAA;;ECUA,IAAauM,YAAb,gBAAA,UAAA,OAAA,EAAA;EAAA,EAAA,SAAA,CAAA,YAAA,EAAA,OAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,YAAA,CAAA,CAAA;;IAEI,SAAc,YAAA,GAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;;MAAA,OACJ,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;EACFC,MAAAA,UAAU,EAAE,EADV;EAEFC,MAAAA,WAAW,EAAE,EAFX;EAGFC,MAAAA,UAAU,EAAE,EAHV;EAIFC,MAAAA,WAAW,EAAE,EAJX;EAKFC,MAAAA,gBAAgB,EAAE,EALhB;EAMFC,MAAAA,iBAAiB,EAAE,EANjB;EAOFC,MAAAA,gBAAgB,EAAE,EAPhB;EAQFC,MAAAA,iBAAiB,EAAE,EARjB;EASFC,MAAAA,aAAa,EAAE,EATb;EAUFC,MAAAA,aAAa,EAAE,EAVb;EAWFC,MAAAA,cAAc,EAAE,EAXd;EAYFC,MAAAA,UAAU,EAAE,EAZV;EAaFC,MAAAA,WAAW,EAAE,EAbX;EAcFC,MAAAA,UAAU,EAAE,EAdV;EAeFC,MAAAA,eAAe,EAAE,EAff;EAgBFC,MAAAA,UAAU,EAAE,EAhBV;EAiBFC,MAAAA,YAAY,EAAE,EAjBZ;EAkBFC,MAAAA,UAAU,EAAE,EAlBV;EAmBFC,MAAAA,YAAY,EAAE,EAnBZ;EAoBFC,MAAAA,aAAa,EAAE,EApBb;EAqBFC,MAAAA,gBAAgB,EAAE,EArBhB;EAsBFC,MAAAA,gBAAgB,EAAE,EAtBhB;EAuBFC,MAAAA,OAAO,EAAE,EAvBP;EAwBFC,MAAAA,KAAK,EAAE,EAxBL;EAyBFvF,MAAAA,SAAS,EAAE,EAzBT;EA0BFwF,MAAAA,UAAU,EAAE,EA1BV;EA2BFhJ,MAAAA,IAAI,EAAE,EA3BJ;EA4BFiJ,MAAAA,MAAM,EAAE,EA5BN;EA6BFrD,MAAAA,KAAK,EAAE,EA7BL;EA8BFsD,MAAAA,SAAS,EAAE,EA9BT;EA+BFC,MAAAA,WAAW,EAAE,EA/BX;EAgCF,MAAA,QAAA,EAAQ,EAhCN;EAiCF,MAAA,QAAA,EAAQ,EAjCN;EAkCFC,MAAAA,OAAO,EAAE,EAlCP;EAmCFC,MAAAA,KAAK,EAAE,EAAA;OApCD,CAAA,CAAA;EAsCb,GAAA;;EAxCL,EAAA,OAAA,YAAA,CAAA,YAAA,CAAA,CAAA;EAAA,CAAA,CAAkCnC,MAAlC,CAAA;;ACCA,MAAaoC,UAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,UAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,UAAA,CAAA,CAAA;;IAMI,SAAYzR,UAAAA,CAAAA,EAAZ,EAAwBwI,SAAxB,EAAgD;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;;EAC5C,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMxI,EAAN,EAAU,IAAI0P,YAAJ,EAAV,CAAA,CAAA;;EAD4C,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAJhC,EAIgC,CAAA,CAAA;;MAAA,eAHrC,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,IAAIR,QAAJ,EAGqC,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAG5C,KAAKlB,CAAAA,IAAL,GAAY,IAAIH,UAAJ,CAAerF,SAAf,EAA0B,KAAK/C,CAAAA,UAA/B,EAAZ,sBAAA,CAAA,KAAA,CAAA,CAAA,CAAA;;MAEA,KAAKwF,CAAAA,EAAL,CAAQ,SAAR,EAAmBlF,YAAY,CAAC,SAAD,EAAY,UAAAnC,CAAC,EAAA;EAAA,MAAA,OAAI,MAAKkC,OAAL,CAAa,SAAb,EAAwBlC,CAAxB,CAAJ,CAAA;EAAA,KAAb,CAA/B,CAAA,CAAA;;MACA,KAAKqH,CAAAA,EAAL,CAAQ,SAAR,EAAmBlF,YAAY,CAAC,OAAD,EAAU,UAAAnC,CAAC,EAAA;EAAA,MAAA,OAAI,MAAKkC,OAAL,CAAa,OAAb,EAAsBlC,CAAtB,CAAJ,CAAA;EAAA,KAAX,CAA/B,CAAA,CAAA;;MAEA,KAAKqH,CAAAA,EAAL,CAAQ,YAAR,EAAsB,UAAA,IAAA,EAAA;QAAA,IAAGjK,IAAH,QAAGA,IAAH;YAASwM,UAAT,QAASA,UAAT,CAAA;EAAA,MAAA,OAA0B,MAAKkE,UAAL,CAAgB1Q,IAAhB,EAAsBwM,UAAtB,CAA1B,CAAA;OAAtB,CAAA,CAAA;;MACA,KAAKvC,CAAAA,EAAL,CAAQ,cAAR,EAAwB,YAAA;EAAA,MAAA,OAAM,MAAK0G,QAAL,CAAcC,IAAd,CAAmB,UAAAC,CAAC,EAAI;UAClD,IAAMtD,QAAQ,GAAG,KAAA,CAAKP,IAAL,CAAUnJ,KAAV,CAAgBwI,GAAhB,CAAoBwE,CAApB,CAAjB,CAAA;;EAEAtD,QAAAA,QAAQ,IAAIA,QAAQ,CAACvH,OAAT,EAAZ,CAAA;EACH,OAJ6B,CAAN,CAAA;OAAxB,CAAA,CAAA;;MAKA,KAAKiE,CAAAA,EAAL,CAAQ,eAAR,EAAyB,UAAA,KAAA,EAAA;QAAA,IAAGQ,EAAH,SAAGA,EAAH;YAAOC,EAAP,SAAOA,EAAP,CAAA;EAAA,MAAA,OAAgB,MAAKiG,QAAL,CAAcC,IAAd,CAAmB,UAAAC,CAAC,EAAI;UAC7D,IAAMtD,QAAQ,GAAG,KAAA,CAAKP,IAAL,CAAUnJ,KAAV,CAAgBwI,GAAhB,CAAoBwE,CAApB,CAAjB,CAAA;;UAEAtD,QAAQ,IAAIA,QAAQ,CAACtH,MAAT,CAAgBwE,EAAhB,EAAoBC,EAApB,CAAZ,CAAA;EACH,OAJwC,CAAhB,CAAA;OAAzB,CAAA,CAAA;;EAd4C,IAAA,OAAA,KAAA,CAAA;EAmB/C,GAAA;;EAzBL,EAAA,YAAA,CAAA,UAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KA2BI,EAAA,SAAA,OAAA,CAAQ1K,IAAR,EAAoB;QAChB,IAAI,CAAC,KAAK8E,OAAL,CAAa,YAAb,EAA2B9E,IAA3B,CAAL,EAAuC,OAAA;EAEvC,MAAA,IAAA,CAAK6D,KAAL,CAAWrB,IAAX,CAAgBxC,IAAhB,CAAA,CAAA;EACA,MAAA,IAAA,CAAKgN,IAAL,CAAU8D,OAAV,CAAkB9Q,IAAlB,CAAA,CAAA;EAEA,MAAA,IAAA,CAAK8E,OAAL,CAAa,aAAb,EAA4B9E,IAA5B,CAAA,CAAA;EACH,KAAA;EAlCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAoCI,EAAA,SAAA,UAAA,CAAWA,IAAX,EAAuB;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;QACnB,IAAI,CAAC,KAAK8E,OAAL,CAAa,YAAb,EAA2B9E,IAA3B,CAAL,EAAuC,OAAA;EAEvCA,MAAAA,IAAI,CAAC2N,cAAL,EAAA,CAAsBpL,OAAtB,CAA8B,UAAAmB,CAAC,EAAA;EAAA,QAAA,OAAI,MAAI,CAAC9B,gBAAL,CAAsB8B,CAAtB,CAAJ,CAAA;SAA/B,CAAA,CAAA;EAEA,MAAA,IAAA,CAAKG,KAAL,CAAWV,MAAX,CAAkB,IAAKU,CAAAA,KAAL,CAAWT,OAAX,CAAmBpD,IAAnB,CAAlB,EAA4C,CAA5C,CAAA,CAAA;EACA,MAAA,IAAA,CAAKgN,IAAL,CAAU+D,UAAV,CAAqB/Q,IAArB,CAAA,CAAA;EAEA,MAAA,IAAA,CAAK8E,OAAL,CAAa,aAAb,EAA4B9E,IAA5B,CAAA,CAAA;EACH,KAAA;EA7CL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EA+CI,SAAQC,OAAAA,CAAAA,MAAR,EAAwBJ,KAAxB,EAA0D;QAAA,IAApBkB,IAAoB,uEAAJ,EAAI,CAAA;EACtD,MAAA,IAAI,CAAC,IAAA,CAAK+D,OAAL,CAAa,kBAAb,EAAiC;EAAE7E,QAAAA,MAAM,EAANA,MAAF;EAAUJ,QAAAA,KAAK,EAALA,KAAAA;EAAV,OAAjC,CAAL,EAA0D,OAAA;;QAE1D,IAAI;EACA,QAAA,IAAMqD,UAAU,GAAGjD,MAAM,CAAC+Q,SAAP,CAAiBnR,KAAjB,CAAnB,CAAA;UAEAqD,UAAU,CAACnC,IAAX,GAAkBA,IAAlB,CAAA;EACA,QAAA,IAAA,CAAKiM,IAAL,CAAUrL,aAAV,CAAwBuB,UAAxB,CAAA,CAAA;EAEA,QAAA,IAAA,CAAK4B,OAAL,CAAa,mBAAb,EAAkC5B,UAAlC,CAAA,CAAA;SANJ,CAOE,OAAON,CAAP,EAAU;EACR,QAAA,IAAA,CAAKkC,OAAL,CAAa,MAAb,EAAqBlC,CAArB,CAAA,CAAA;EACH,OAAA;EACJ,KAAA;EA5DL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KA8DI,EAAA,SAAA,gBAAA,CAAiBM,UAAjB,EAAyC;QACrC,IAAI,CAAC,KAAK4B,OAAL,CAAa,kBAAb,EAAiC5B,UAAjC,CAAL,EAAmD,OAAA;EAEnD,MAAA,IAAA,CAAK8J,IAAL,CAAUpL,gBAAV,CAA2BsB,UAA3B,CAAA,CAAA;EACAA,MAAAA,UAAU,CAAC+N,MAAX,EAAA,CAAA;EAEA,MAAA,IAAA,CAAKnM,OAAL,CAAa,mBAAb,EAAkC5B,UAAlC,CAAA,CAAA;EACH,KAAA;EArEL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAuEI,EAAA,SAAA,UAAA,CAAWlD,IAAX,EAA2C;QAAA,IAApBwM,UAAoB,uEAAP,KAAO,CAAA;EACvC,MAAA,IAAI,IAAK3I,CAAAA,KAAL,CAAWT,OAAX,CAAmBpD,IAAnB,CAAA,KAA6B,CAAC,CAAlC,EACI,MAAM,IAAIT,KAAJ,CAAU,wBAAV,CAAN,CAAA;QAEJ,IAAI,CAAC,KAAKuF,OAAL,CAAa,YAAb,EAA2B9E,IAA3B,CAAL,EAAuC,OAAA;EAEvC,MAAA,IAAA,CAAK2Q,QAAL,CAAcO,GAAd,CAAkBlR,IAAlB,EAAwBwM,UAAxB,CAAA,CAAA;EAEA,MAAA,IAAA,CAAK1H,OAAL,CAAa,cAAb,EAA6B9E,IAA7B,CAAA,CAAA;EACH,KAAA;EAhFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KAkFI,EAAA,SAAA,YAAA,CAAanB,IAAb,EAA2B;QACvB,IAAMgG,SAAS,GAAG,IAAKJ,CAAAA,UAAL,CAAgB4H,GAAhB,CAAoBxN,IAApB,CAAlB,CAAA;EAEA,MAAA,IAAI,CAACgG,SAAL,EACI,MAAA,YAAA,CAAA,MAAA,CAAmBhG,IAAnB,EAAA,YAAA,CAAA,CAAA;EAEJ,MAAA,OAAOgG,SAAP,CAAA;EACH,KAAA;EAzFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KA2FI,EAAA,SAAA,QAAA,CAASA,SAAT,EAA+B;EAC3B,MAAA,IAAA,CAAA,eAAA,CAAA,UAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAeA,SAAf,CAAA,CAAA;;QACAA,SAAS,CAACsM,MAAV,GAAmB,IAAnB,CAAA;EACH,KAAA;EA9FL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAgGI,SAAQ,KAAA,GAAA;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EACJ,MAAA,kBAAA,CAAI,KAAKtN,KAAT,CAAA,CAAgBtB,OAAhB,CAAwB,UAAAvC,IAAI,EAAA;EAAA,QAAA,OAAI,MAAI,CAAC+Q,UAAL,CAAgB/Q,IAAhB,CAAJ,CAAA;SAA5B,CAAA,CAAA;;QACA,IAAK8E,CAAAA,OAAL,CAAa,OAAb,CAAA,CAAA;EACH,KAAA;EAnGL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAqGI,SAAS,MAAA,GAAA;EACL,MAAA,IAAM/D,IAAU,GAAG;UAAE/B,EAAE,EAAE,KAAKA,EAAX;EAAe6E,QAAAA,KAAK,EAAE,EAAA;SAAzC,CAAA;EAEA,MAAA,IAAA,CAAKA,KAAL,CAAWtB,OAAX,CAAmB,UAAAvC,IAAI,EAAA;UAAA,OAAIe,IAAI,CAAC8C,KAAL,CAAW7D,IAAI,CAAChB,EAAhB,CAAsBgB,GAAAA,IAAI,CAACc,MAAL,EAA1B,CAAA;SAAvB,CAAA,CAAA;EACA,MAAA,IAAA,CAAKgE,OAAL,CAAa,QAAb,EAAuB/D,IAAvB,CAAA,CAAA;EACA,MAAA,OAAOA,IAAP,CAAA;EACH,KAAA;EA3GL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KA6GI,EAAA,SAAA,YAAA,CAAaG,IAAb,EAAyB;QACrB,IAAMkQ,QAAQ,GAAGzN,SAAS,CAAC0N,QAAV,CAAmB,IAAKrS,CAAAA,EAAxB,EAA4BkC,IAA5B,CAAjB,CAAA;;EAEA,MAAA,IAAI,CAACkQ,QAAQ,CAAChN,OAAd,EAAuB;EACnB,QAAA,IAAA,CAAKU,OAAL,CAAa,MAAb,EAAqBsM,QAAQ,CAAClN,GAA9B,CAAA,CAAA;EACA,QAAA,OAAO,KAAP,CAAA;EACH,OAAA;;QAED,IAAKoN,CAAAA,MAAL,GAAc,IAAd,CAAA;EACA,MAAA,IAAA,CAAKd,KAAL,EAAA,CAAA;EACA,MAAA,IAAA,CAAK1L,OAAL,CAAa,QAAb,EAAuB5D,IAAvB,CAAA,CAAA;EACA,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EAzHL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EA2HI,SAAc,WAAA,GAAA;QACV,IAAKoQ,CAAAA,MAAL,GAAc,KAAd,CAAA;EACA,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EA9HL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,SAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAgII,kBAAepQ,IAAf,EAAA;EAAA,QAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EAAA,QAAA,IAAA,KAAA,CAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,IACS,IAAKqQ,CAAAA,YAAL,CAAkBrQ,IAAlB,CADT,EAAA;EAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EACyC,KADzC,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAEU2C,gBAAAA,KAFV,GAEyC,EAFzC,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAKc2N,OAAO,CAACC,GAAR,CAAY3N,MAAM,CAAC4N,IAAP,CAAYxQ,IAAI,CAAC2C,KAAjB,CAAA,CAAwBJ,GAAxB,eAAA,YAAA;EAAA,kBAAA,IAAA,KAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAA4B,iBAAMzE,EAAN,EAAA;EAAA,oBAAA,IAAA,IAAA,EAAA,SAAA,CAAA;EAAA,oBAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;EAAA,sBAAA,OAAA,CAAA,EAAA;EAAA,wBAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;EAAA,0BAAA,KAAA,CAAA;EACpCgB,4BAAAA,IADoC,GAC7BkB,IAAI,CAAC2C,KAAL,CAAW7E,EAAX,CAD6B,CAAA;8BAEpC6F,SAFoC,GAExB,MAAI,CAAC8M,YAAL,CAAkB3R,IAAI,CAACnB,IAAvB,CAFwB,CAAA;EAAA,4BAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;8BAAA,OAIxBgG,SAAS,CAACrD,KAAV,CAAgB1C,IAAI,CAAC8S,QAAL,CAAc5R,IAAd,CAAhB,CAJwB,CAAA;;EAAA,0BAAA,KAAA,CAAA;8BAI1C6D,KAAK,CAAC7E,EAAD,CAJqC,GAAA,QAAA,CAAA,IAAA,CAAA;;EAK1C,4BAAA,MAAI,CAAC8R,OAAL,CAAajN,KAAK,CAAC7E,EAAD,CAAlB,CAAA,CAAA;;EAL0C,0BAAA,KAAA,CAAA,CAAA;EAAA,0BAAA,KAAA,KAAA;EAAA,4BAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;EAAA,yBAAA;EAAA,uBAAA;EAAA,qBAAA,EAAA,OAAA,CAAA,CAAA;qBAA5B,CAAA,CAAA,CAAA;;EAAA,kBAAA,OAAA,UAAA,GAAA,EAAA;EAAA,oBAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,mBAAA,CAAA;EAAA,iBAAA,EAAA,CAAZ,CALd,CAAA;;EAAA,cAAA,KAAA,CAAA;kBAaQ8E,MAAM,CAAC4N,IAAP,CAAYxQ,IAAI,CAAC2C,KAAjB,CAAA,CAAwBtB,OAAxB,CAAgC,UAAAvD,EAAE,EAAI;EAClC,kBAAA,IAAM6S,QAAQ,GAAG3Q,IAAI,CAAC2C,KAAL,CAAW7E,EAAX,CAAjB,CAAA;EACA,kBAAA,IAAMgB,IAAI,GAAG6D,KAAK,CAAC7E,EAAD,CAAlB,CAAA;oBAEA8E,MAAM,CAAC4N,IAAP,CAAYG,QAAQ,CAAC3R,OAArB,CAAA,CAA8BqC,OAA9B,CAAsC,UAAAjD,GAAG,EAAI;EACzC,oBAAA,IAAMwS,UAAU,GAAGD,QAAQ,CAAC3R,OAAT,CAAiBZ,GAAjB,CAAnB,CAAA;EAEAwS,oBAAAA,UAAU,CAACxR,WAAX,CAAuBiC,OAAvB,CAA+B,UAAAwP,cAAc,EAAI;EAC7C,sBAAA,IAAMC,MAAM,GAAGD,cAAc,CAAC/R,IAA9B,CAAA;EACA,sBAAA,IAAMe,IAAI,GAAGgR,cAAc,CAAChR,IAA5B,CAAA;wBACA,IAAMkR,YAAY,GAAGjS,IAAI,CAACE,OAAL,CAAamM,GAAb,CAAiB/M,GAAjB,CAArB,CAAA;EACA,sBAAA,IAAM4S,WAAW,GAAGrO,KAAK,CAACmO,MAAD,CAAL,CAAclS,MAAd,CAAqBuM,GAArB,CAAyB0F,cAAc,CAAClS,KAAxC,CAApB,CAAA;;EAEA,sBAAA,IAAI,CAACoS,YAAD,IAAiB,CAACC,WAAtB,EAAmC;0BAC/B,OAAO,MAAI,CAACpN,OAAL,CAAa,OAAb,EAA+C9E,wBAAAA,CAAAA,MAAAA,CAAAA,IAAI,CAAChB,EAApD,CAAP,CAAA,CAAA;EACH,uBAAA;;EAED,sBAAA,MAAI,CAACmT,OAAL,CAAaF,YAAb,EAA2BC,WAA3B,EAAwCnR,IAAxC,CAAA,CAAA;uBAVJ,CAAA,CAAA;qBAHJ,CAAA,CAAA;mBAJJ,CAAA,CAAA;EAbR,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,gBAAA,MAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;kBAoCQ,IAAK+D,CAAAA,OAAL,CAAa,MAAb,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA;kBApCR,OAqCe,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,CAAC,IAAKsN,CAAAA,WAAL,EArChB,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA;kBAAA,OAwCW,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,IAAA,CAAKA,WAAL,EAxCX,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAhIJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,QAAA,CAAA,EAAA,EAAA;EAAA,QAAA,OAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,QAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,UAAA,CAAA;EAAA,CAAA,CAAgC7N,OAAhC;;ACPA,MAAa8N,MAAb,gBAAA,UAAA,GAAA,EAAA;EAAA,EAAA,SAAA,CAAA,MAAA,EAAA,GAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,MAAA,CAAA,CAAA;;EAEI,EAAA,SAAA,MAAA,CAAY/S,GAAZ,EAAyBgE,KAAzB,EAAwCP,MAAxC,EAA2E;MAAA,IAAnBC,UAAmB,uEAAN,IAAM,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;EAAA,IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EACjE1D,GADiE,EAC5DgE,KAD4D,EACrDP,MADqD,EAC7CC,UAD6C,CAAA,CAAA;EAE1E,GAAA;;EAJL,EAAA,YAAA,CAAA,MAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAMI,SAAgB,aAAA,GAAA;EACZ,MAAA,OAAO,IAAK1C,CAAAA,WAAL,CAAiBiD,MAAjB,GAA0B,CAAjC,CAAA;EACH,KAAA;EARL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAUI,EAAA,SAAA,SAAA,CAAU1D,KAAV,EAAwB;EACpB,MAAA,IAAI,CAAC,IAAKkD,CAAAA,MAAL,CAAYuP,cAAZ,CAA2BzS,KAAK,CAACkD,MAAjC,CAAL,EACI,MAAM,IAAIxD,KAAJ,CAAU,wBAAV,CAAN,CAAA;EACJ,MAAA,IAAI,CAACM,KAAK,CAACoD,mBAAP,IAA8BpD,KAAK,CAAC2D,aAAN,EAAlC,EACI,MAAM,IAAIjE,KAAJ,CAAU,kCAAV,CAAN,CAAA;EACJ,MAAA,IAAI,CAAC,IAAA,CAAK0D,mBAAN,IAA6B,IAAKO,CAAAA,aAAL,EAAjC,EACI,MAAM,IAAIjE,KAAJ,CAAU,mCAAV,CAAN,CAAA;QAEJ,IAAM2D,UAAU,GAAG,IAAIxB,UAAJ,CAAe,IAAf,EAAqB7B,KAArB,CAAnB,CAAA;EAEA,MAAA,IAAA,CAAKS,WAAL,CAAiBkC,IAAjB,CAAsBU,UAAtB,CAAA,CAAA;EACA,MAAA,OAAOA,UAAP,CAAA;EACH,KAAA;EAtBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAwBI,EAAA,SAAA,WAAA,CAAYrD,KAAZ,EAA0B;EACtB,MAAA,OAAO,KAAKS,WAAL,CAAiBiS,IAAjB,CAAsB,UAACpT,IAAD,EAAU;EACnC,QAAA,OAAOA,IAAI,CAACU,KAAL,KAAeA,KAAtB,CAAA;EACH,OAFM,CAAP,CAAA;EAGH,KAAA;EA5BL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EA8BI,SAAqB,MAAA,GAAA;QACjB,OAAO;EACH,QAAA,aAAA,EAAe,KAAKS,WAAL,CAAiBmD,GAAjB,CAAqB,UAAAC,CAAC,EAAI;EACrC,UAAA,IAAI,CAACA,CAAC,CAAC7D,KAAF,CAAQG,IAAb,EAAmB,MAAM,IAAIT,KAAJ,CAAU,yBAAV,CAAN,CAAA;YAEnB,OAAO;EACHS,YAAAA,IAAI,EAAE0D,CAAC,CAAC7D,KAAF,CAAQG,IAAR,CAAahB,EADhB;EAEHa,YAAAA,KAAK,EAAE6D,CAAC,CAAC7D,KAAF,CAAQP,GAFZ;cAGHyB,IAAI,EAAE2C,CAAC,CAAC3C,IAAAA;aAHZ,CAAA;WAHW,CAAA;SADnB,CAAA;EAWH,KAAA;EA1CL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,MAAA,CAAA;EAAA,CAAA,CAA4B+B,EAA5B;;ACNA,MAAa0P,MAAb,gBAAA,YAAA;EAMI,EAAA,SAAA,MAAA,CAAY3T,IAAZ,EAAqC;MAAA,IAAXkC,IAAW,uEAAJ,EAAI,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAFd,EAEc,CAAA,CAAA;;MACjC,IAAKlC,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACA,IAAKkC,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACA,IAAK0R,CAAAA,UAAL,GAAkB,EAAlB,CAAA;EACH,GAAA;;EAVL,EAAA,YAAA,CAAA,MAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAYI,EAAA,SAAA,WAAA,CAAY1P,MAAZ,EAA4B;EACxB,MAAA,IAAA,CAAK0P,UAAL,CAAgBjQ,IAAhB,CAAqBO,MAArB,CAAA,CAAA;EACH,KAAA;EAdL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAgBI,EAAA,SAAA,cAAA,CAAeA,MAAf,EAA+B;QAC3B,OAAO,IAAA,KAASA,MAAT,IAAmB,IAAA,CAAK0P,UAAL,CAAgBtG,QAAhB,CAAyBpJ,MAAzB,CAA1B,CAAA;EACH,KAAA;EAlBL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,MAAA,CAAA;EAAA,CAAA;;ECEA,SAAS2P,SAAT,CAAsBC,MAAtB,EAAmCC,MAAnC,EAAgD;EAC5C,EAAA,OAAOD,MAAM,CAACpJ,MAAP,CAAc,UAAAsJ,KAAK,EAAA;MAAA,OAAI,CAAC,CAAD,KAAOD,MAAM,CAACxP,OAAP,CAAeyP,KAAf,CAAX,CAAA;EAAA,GAAnB,CAAP,CAAA;EACH,CAAA;;AAED,MAAaC,SAAb,gBAAA,YAAA;EAII,EAAA,SAAA,SAAA,CAAYjP,KAAZ,EAA8B;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;MAC1B,IAAKA,CAAAA,KAAL,GAAaA,KAAb,CAAA;EACH,GAAA;;EANL,EAAA,YAAA,CAAA,SAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;MAAA,KAQI,EAAA,SAAA,iBAAA,CAAkB7D,IAAlB,EAA8C;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;EAC1C,MAAA,OAAO8D,MAAM,CAAC4N,IAAP,CAAY1R,IAAI,CAACF,MAAjB,CAAyBS,CAAAA,MAAzB,CAAgC,UAACwS,GAAD,EAAkBzT,GAAlB,EAAkC;UACrE,IAAQgB,WAAR,GAAwBN,IAAI,CAACF,MAAL,CAAYR,GAAZ,CAAxB,CAAQgB,WAAR,CAAA;EACA,QAAA,IAAM0S,SAAS,GAAG,CAAC1S,WAAW,IAAI,EAAhB,EAAoBC,MAApB,CAA2B,UAAC0S,CAAD,EAAgBvP,CAAhB,EAA2C;YACpF,OAAWuP,EAAAA,CAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,CAAX,IAAc,KAAI,CAACpP,KAAL,CAAWH,CAAC,CAAC1D,IAAb,CAAd,CAAA,CAAA,CAAA;WADc,EAEf,EAFe,CAAlB,CAAA;UAIA,OAAW+S,EAAAA,CAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,GAAX,sBAAmBC,SAAnB,CAAA,CAAA,CAAA;SANG,EAOJ,EAPI,CAAP,CAAA;EAQH,KAAA;EAjBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAmBI,SAAS9T,QAAAA,CAAAA,IAAT,EAA2BgU,UAA3B,EAAoE;EAChE,MAAA,IAAMC,MAAM,GAAGT,SAAS,CAAWxT,IAAX,EAAiBgU,UAAjB,CAAxB,CAAA;QAEA,IAAIC,MAAM,CAAC5P,MAAX,EACI,OAAO4P,MAAM,CAAC,CAAD,CAAb,CAAA;;EAJ4D,MAAA,IAAA,SAAA,GAAA,0BAAA,CAM7CD,UAN6C,CAAA;EAAA,UAAA,KAAA,CAAA;;EAAA,MAAA,IAAA;UAMhE,KAA+B,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAApBlT,IAAoB,GAAA,KAAA,CAAA,KAAA,CAAA;EAC3B,UAAA,IAAMoT,CAAC,GAAA,CAAIpT,IAAJ,CAAA,CAAA,MAAA,CAAA,kBAAA,CAAad,IAAb,CAAP,CAAA,CAAA;EACA,UAAA,IAAMmU,KAAK,GAAG,IAAKC,CAAAA,QAAL,CAAcF,CAAd,EAAiB,IAAA,CAAKG,iBAAL,CAAuBvT,IAAvB,CAAjB,CAAd,CAAA;YAEA,IAAIqT,KAAJ,EACI,OAAOA,KAAP,CAAA;EACP,SAAA;EAZ+D,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;;EAchE,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EAlCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAoCI,SAA0B,MAAA,GAAA;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EACtB,MAAA,IAAMG,QAAQ,GAAG1P,MAAM,CAAC4N,IAAP,CAAY,IAAK7N,CAAAA,KAAjB,CAAwBJ,CAAAA,GAAxB,CAA4B,UAAAzE,EAAE,EAAA;EAAA,QAAA,OAAI,MAAI,CAAC6E,KAAL,CAAW7E,EAAX,CAAJ,CAAA;EAAA,OAA9B,CAAjB,CAAA;;EADsB,MAAA,IAAA,UAAA,GAAA,0BAAA,CAGHwU,QAHG,CAAA;EAAA,UAAA,MAAA,CAAA;;EAAA,MAAA,IAAA;UAGtB,KAA6B,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAAlBxT,IAAkB,GAAA,MAAA,CAAA,KAAA,CAAA;EACzB,UAAA,IAAMmT,MAAM,GAAG,IAAKG,CAAAA,QAAL,CAAc,CAACtT,IAAD,CAAd,EAAsB,IAAKuT,CAAAA,iBAAL,CAAuBvT,IAAvB,CAAtB,CAAf,CAAA;YAEA,IAAImT,MAAJ,EACI,OAAOA,MAAP,CAAA;EACP,SAAA;EARqB,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;;EAUtB,MAAA,OAAO,IAAP,CAAA;EACH,KAAA;EA/CL,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,SAAA,CAAA;EAAA,CAAA;;ECNO,IAAMM,KAAK,GAAG;EAAEC,EAAAA,SAAS,EAAE,CAAb;EAAgBC,EAAAA,SAAS,EAAE,CAA3B;EAA8BC,EAAAA,KAAK,EAAE,CAAA;EAArC,CAAd;;ECEP,IAAaC,YAAb,gBAAA,UAAA,OAAA,EAAA;EAAA,EAAA,SAAA,CAAA,YAAA,EAAA,OAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,YAAA,CAAA,CAAA;;IAEI,SAAc,YAAA,GAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;;EAAA,IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EACJ,EADI,CAAA,CAAA;EAEb,GAAA;;EAJL,EAAA,OAAA,YAAA,CAAA,YAAA,CAAA,CAAA;EAAA,CAAA,CAAkCxF,MAAlC,CAAA;;ACaA,MAAayF,MAAb,gBAAA,UAAA,QAAA,EAAA;EAAA,EAAA,SAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA;;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,MAAA,CAAA,CAAA;;EAQI,EAAA,SAAA,MAAA,CAAY9U,EAAZ,EAAwB;EAAA,IAAA,IAAA,KAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;;EACpB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAMA,EAAN,EAAU,IAAI6U,YAAJ,EAAV,CAAA,CAAA;;EADoB,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EANN,EAMM,CAAA,CAAA;;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EALJ,IAKI,CAAA,CAAA;;MAAA,eAJhBJ,CAAAA,sBAAAA,CAAAA,KAAAA,CAAAA,EAAAA,OAAAA,EAAAA,KAAK,CAACC,SAIU,CAAA,CAAA;;MAAA,eAHZ,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,IAAIK,GAAJ,EAGY,CAAA,CAAA;;MAAA,eAFd,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAAA,YAAM,EAEQ,CAAA,CAAA;;EAAA,IAAA,OAAA,KAAA,CAAA;EAEvB,GAAA;;EAVL,EAAA,YAAA,CAAA,MAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAYI,SAAe,KAAA,GAAA;EACX,MAAA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAW,IAAA,CAAK9U,EAAhB,CAAf,CAAA;EAEA,MAAA,IAAA,CAAKyF,UAAL,CAAgBlC,OAAhB,CAAwB,UAAAmB,CAAC,EAAA;EAAA,QAAA,OAAIsQ,MAAM,CAACC,QAAP,CAAgBvQ,CAAhB,CAAJ,CAAA;SAAzB,CAAA,CAAA;EAEA,MAAA,OAAOsQ,MAAP,CAAA;EACH,KAAA;EAlBL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,WAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAoBI,iBAAkBE,OAAlB,EAAA;EAAA,QAAA,IAAA,IAAA;EAAA,YAAA,KAAA,GAAA,SAAA,CAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAmCnT,gBAAAA,IAAnC,2DAAmD,IAAnD,CAAA;EAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;kBAAA,OACU,IAAA,CAAKoT,KAAL,EADV,CAAA;;EAAA,cAAA,KAAA,CAAA;kBAEI,IAAKrP,CAAAA,OAAL,CAAa,OAAb,EAAsB;EAAEoP,kBAAAA,OAAO,EAAPA,OAAF;EAAWnT,kBAAAA,IAAI,EAAJA,IAAAA;mBAAjC,CAAA,CAAA;EACA,gBAAA,IAAA,CAAKqT,WAAL,EAAA,CAAA;EAHJ,gBAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAKW,OALX,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;SApBJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,UAAA,CAAA,EAAA,EAAA;EAAA,QAAA,OAAA,WAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,UAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EA4BI,SAAuB,YAAA,GAAA;EACnB,MAAA,IAAI,KAAKC,KAAL,KAAeZ,KAAK,CAACC,SAAzB,EAAoC;EAChC,QAAA,IAAA,CAAKW,KAAL,GAAaZ,KAAK,CAACE,SAAnB,CAAA;EACA,QAAA,OAAO,IAAP,CAAA;EACH,OAAA;;EAED,MAAA,IAAI,KAAKU,KAAL,KAAeZ,KAAK,CAACG,KAAzB,EAAgC;EAC5B,QAAA,OAAO,KAAP,CAAA;EACH,OAAA;;EAEDrF,MAAAA,OAAO,CAACD,IAAR,CAAA,sGAAA,CAAA,CAAA;EAEA,MAAA,OAAO,KAAP,CAAA;EACH,KAAA;EAzCL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EA2CI,SAAsB,WAAA,GAAA;EAClB,MAAA,IAAMlK,OAAO,GAAG,IAAA,CAAKiQ,KAAL,KAAeZ,KAAK,CAACG,KAArC,CAAA;EAEA,MAAA,IAAA,CAAKS,KAAL,GAAaZ,KAAK,CAACC,SAAnB,CAAA;;QAEA,IAAI,CAACtP,OAAL,EAAc;EACV,QAAA,IAAA,CAAKkQ,OAAL,EAAA,CAAA;;EACA,QAAA,IAAA,CAAKA,OAAL,GAAe,YAAM,EAArB,CAAA;EACH,OAAA;;EAED,MAAA,OAAOlQ,OAAP,CAAA;EACH,KAAA;EAtDL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAAA,YAAA;QAAA,IAwDI,MAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;EAAA,QAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EACW,IAAIoN,OAAJ,CAAkB,UAAA+C,GAAG,EAAI;EAC5B,kBAAA,IAAI,MAAI,CAACF,KAAL,KAAeZ,KAAK,CAACE,SAAzB,EAAoC;EAChC,oBAAA,MAAI,CAACU,KAAL,GAAaZ,KAAK,CAACG,KAAnB,CAAA;sBACA,MAAI,CAACU,OAAL,GAAeC,GAAf,CAAA;qBAFJ,MAIK,IAAI,MAAI,CAACF,KAAL,KAAeZ,KAAK,CAACG,KAAzB,EAAgC;EACjC,oBAAA,MAAI,CAACU,OAAL,EAAA,CAAA;;sBACA,MAAI,CAACA,OAAL,GAAeC,GAAf,CAAA;EACH,mBAHI,MAKDA,GAAG,EAAA,CAAA;EACV,iBAXM,CADX,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,QAAA,CAAA,CAAA;SAxDJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,KAAA,GAAA;EAAA,QAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,KAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,KAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAuEI,kBAAmBvU,IAAnB,EAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EACW,IAAIwR,OAAJ,CAAkB,UAAAgD,GAAG,EAAI;EAC5BxU,kBAAAA,IAAI,CAACyU,UAAL,GAAkBzU,IAAI,CAACyU,UAAL,IAAmB,EAArC,CAAA;EACA,kBAAA,IAAIzU,IAAI,CAAC0U,IAAL,IAAa,CAAC1U,IAAI,CAAC2U,UAAvB,EACI3U,IAAI,CAACyU,UAAL,CAAgBjS,IAAhB,CAAqBgS,GAArB,CAAA,CADJ,KAGIA,GAAG,EAAA,CAAA;oBAEPxU,IAAI,CAAC0U,IAAL,GAAY,IAAZ,CAAA;EACH,iBARM,CADX,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,QAAA,CAAA,CAAA;SAvEJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,IAAA,CAAA,GAAA,EAAA;EAAA,QAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,IAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAmFI,EAAA,SAAA,MAAA,CAAO1U,IAAP,EAAyB;EACrBA,MAAAA,IAAI,CAACyU,UAAL,CAAgBlS,OAAhB,CAAwB,UAAAqS,CAAC,EAAA;EAAA,QAAA,OAAIA,CAAC,EAAL,CAAA;SAAzB,CAAA,CAAA;QACA5U,IAAI,CAACyU,UAAL,GAAkB,EAAlB,CAAA;QACAzU,IAAI,CAAC0U,IAAL,GAAY,KAAZ,CAAA;EACH,KAAA;EAvFL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,iBAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAyFI,kBAA+B1U,IAA/B,EAAA;EAAA,QAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EAAA,QAAA,IAAA,GAAA,EAAA,EAAA,EAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,CAAA;;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EACUa,gBAAAA,GADV,GACqC,EADrC,CAAA;EAAA,gBAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAGsBiD,MAAM,CAAC4N,IAAP,CAAY1R,IAAI,CAACF,MAAjB,CAHtB,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,IAAA,EAAA,EAAA,GAAA,YAAA,CAAA,MAAA,CAAA,EAAA;EAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;kBAGeR,GAHf,GAAA,YAAA,CAAA,EAAA,CAAA,CAAA;EAIcO,gBAAAA,KAJd,GAIsBG,IAAI,CAACF,MAAL,CAAYR,GAAZ,CAJtB,CAAA;kBAKcuV,KALd,GAKsBhV,KAAK,CAACS,WAL5B,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAM+BkR,OAAO,CAACC,GAAR,CAAYoD,KAAK,CAACpR,GAAN,eAAA,YAAA;EAAA,kBAAA,IAAA,IAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAAU,kBAAOC,CAAP,EAAA;EAAA,oBAAA,IAAA,QAAA,EAAA,OAAA,CAAA;EAAA,oBAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,sBAAA,OAAA,CAAA,EAAA;EAAA,wBAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,0BAAA,KAAA,CAAA;8BACnCoR,QADmC,GACvB,MAAI,CAAC/T,IAAN,CAAoB8C,KAApB,CAA0BH,CAAC,CAAC1D,IAA5B,CADwB,CAAA;EAAA,4BAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,4BAAA,OAGnB,MAAI,CAAC+U,WAAL,CAAiBD,QAAjB,CAHmB,CAAA;;EAAA,0BAAA,KAAA,CAAA;8BAGnC5U,OAHmC,GAAA,SAAA,CAAA,IAAA,CAAA;;EAAA,4BAAA,IAKpCA,OALoC,EAAA;EAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,8BAAA,MAAA;EAAA,6BAAA;;EAMrC,4BAAA,MAAI,CAACiU,KAAL,EAAA,CAAA;;EANqC,4BAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,4BAAA,MAAA;;EAAA,0BAAA,KAAA,CAAA;EAAA,4BAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAQ9BjU,OAAO,CAACwD,CAAC,CAACzD,MAAH,CARuB,CAAA,CAAA;;EAAA,0BAAA,KAAA,CAAA,CAAA;EAAA,0BAAA,KAAA,KAAA;EAAA,4BAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,yBAAA;EAAA,uBAAA;EAAA,qBAAA,EAAA,QAAA,CAAA,CAAA;qBAAV,CAAA,CAAA,CAAA;;EAAA,kBAAA,OAAA,UAAA,GAAA,EAAA;EAAA,oBAAA,OAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,mBAAA,CAAA;EAAA,iBAAA,EAAA,CAAZ,CAN/B,CAAA;;EAAA,cAAA,KAAA,CAAA;kBAMc+U,QANd,GAAA,SAAA,CAAA,IAAA,CAAA;EAiBQnU,gBAAAA,GAAG,CAACvB,GAAD,CAAH,GAAW0V,QAAX,CAAA;;EAjBR,cAAA,KAAA,EAAA;EAAA,gBAAA,EAAA,EAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,MAAA;;EAAA,cAAA,KAAA,EAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAoBWnU,GApBX,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,QAAA,CAAA,CAAA;SAzFJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,gBAAA,CAAA,GAAA,EAAA;EAAA,QAAA,OAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,gBAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,cAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAgHI,kBAA4Bb,IAA5B,EAAA;EAAA,QAAA,IAAA,SAAA,EAAA,SAAA,EAAA,UAAA,CAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAC4B,IAAKiV,CAAAA,gBAAL,CAAsBjV,IAAtB,CAD5B,CAAA;;EAAA,cAAA,KAAA,CAAA;kBACUkV,SADV,GAAA,SAAA,CAAA,IAAA,CAAA;kBAEUrQ,SAFV,GAEsB,KAAKJ,UAAL,CAAgB4H,GAAhB,CAAoBrM,IAAI,CAACnB,IAAzB,CAFtB,CAAA;EAGU8V,gBAAAA,UAHV,GAGuB,EAHvB,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAMc9P,SAAS,CAACsQ,MAAV,CAAA,KAAA,CAAAtQ,SAAS,EAAQ7E,CAAAA,IAAR,EAAckV,SAAd,EAAyBP,UAAzB,CAAwC,CAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAKS,IAA7C,CANvB,CAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,gBAAA,MAAA;;EAAA,cAAA,KAAA,EAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;EAQQ,gBAAA,IAAA,CAAKjB,KAAL,EAAA,CAAA;kBACA,IAAKrP,CAAAA,OAAL,CAAa,MAAb,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;EATR,cAAA,KAAA,EAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAYW6P,UAZX,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;SAhHJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,aAAA,CAAA,GAAA,EAAA;EAAA,QAAA,OAAA,cAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,aAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,YAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CA+HI,kBAA0B3U,IAA1B,EAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;kBAAA,IACQ,EAAA,IAAA,CAAKqU,KAAL,KAAeZ,KAAK,CAACG,KAArB,IAA8B,CAAC5T,IADvC,CAAA,EAAA;EAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAEe,IAFf,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAIU,IAAKqV,CAAAA,IAAL,CAAUrV,IAAV,CAJV,CAAA;;EAAA,cAAA,KAAA,CAAA;kBAAA,IAMSA,IAAI,CAAC2U,UANd,EAAA;EAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAOgC,IAAKW,CAAAA,aAAL,CAAmBtV,IAAnB,CAPhC,CAAA;;EAAA,cAAA,KAAA,CAAA;EAOQA,gBAAAA,IAAI,CAAC2U,UAPb,GAAA,SAAA,CAAA,IAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;kBAUI,IAAKY,CAAAA,MAAL,CAAYvV,IAAZ,CAAA,CAAA;kBAVJ,OAWWA,SAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EAAAA,IAAI,CAAC2U,UAXhB,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,CAAA,CAAA;SA/HJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,WAAA,CAAA,GAAA,EAAA;EAAA,QAAA,OAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,WAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,eAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CA6II,mBAA6B3U,IAA7B,EAAA;EAAA,QAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,IAAA,EACQ,IAAKqU,CAAAA,KAAL,KAAeZ,KAAK,CAACG,KAD7B,CAAA,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAEe,IAFf,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAIiBpC,OAAO,CAACC,GAAR,CAAY3N,MAAM,CAAC4N,IAAP,CAAY1R,IAAI,CAACE,OAAjB,CAAA,CAA0BuD,GAA1B,eAAA,YAAA;EAAA,kBAAA,IAAA,KAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAA8B,kBAAOnE,GAAP,EAAA;EAAA,oBAAA,IAAA,MAAA,CAAA;EAAA,oBAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,sBAAA,OAAA,CAAA,EAAA;EAAA,wBAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,0BAAA,KAAA,CAAA;EAC7CW,4BAAAA,MAD6C,GACpCD,IAAI,CAACE,OAAL,CAAaZ,GAAb,CADoC,CAAA;EAAA,4BAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;8BAAA,OAEtCkS,OAAO,CAACC,GAAR,CAAYxR,MAAM,CAACK,WAAP,CAAmBmD,GAAnB,eAAA,YAAA;EAAA,8BAAA,IAAA,KAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAAuB,kBAAOC,CAAP,EAAA;EAAA,gCAAA,IAAA,QAAA,CAAA;EAAA,gCAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;EAAA,kCAAA,OAAA,CAAA,EAAA;EAAA,oCAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;EAAA,sCAAA,KAAA,CAAA;0CACtC8R,QADsC,GAC1B,MAAI,CAACzU,IAAN,CAAoB8C,KAApB,CAA0BH,CAAC,CAAC1D,IAA5B,CAD2B,CAAA;;EAAA,wCAAA,IAExC,MAAI,CAACyV,SAAL,CAAepW,GAAf,CAAmBmW,QAAnB,CAFwC,EAAA;EAAA,0CAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,0CAAA,MAAA;EAAA,yCAAA;;EAGxC,wCAAA,MAAI,CAACC,SAAL,CAAevE,GAAf,CAAmBsE,QAAnB,CAAA,CAAA;;EAHwC,wCAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,wCAAA,OAIlC,MAAI,CAACT,WAAL,CAAiBS,QAAjB,CAJkC,CAAA;;EAAA,sCAAA,KAAA,CAAA;EAAA,wCAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,wCAAA,OAKlC,MAAI,CAACE,cAAL,CAAoBF,QAApB,CALkC,CAAA;;EAAA,sCAAA,KAAA,CAAA,CAAA;EAAA,sCAAA,KAAA,KAAA;EAAA,wCAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,qCAAA;EAAA,mCAAA;EAAA,iCAAA,EAAA,QAAA,CAAA,CAAA;iCAAvB,CAAA,CAAA,CAAA;;EAAA,8BAAA,OAAA,UAAA,GAAA,EAAA;EAAA,gCAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,+BAAA,CAAA;EAAA,6BAAA,EAAA,CAAZ,CAFsC,CAAA;;EAAA,0BAAA,KAAA,CAAA;EAAA,4BAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,SAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,0BAAA,KAAA,CAAA,CAAA;EAAA,0BAAA,KAAA,KAAA;EAAA,4BAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;EAAA,yBAAA;EAAA,uBAAA;EAAA,qBAAA,EAAA,QAAA,CAAA,CAAA;qBAA9B,CAAA,CAAA,CAAA;;EAAA,kBAAA,OAAA,UAAA,GAAA,EAAA;EAAA,oBAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,mBAAA,CAAA;EAAA,iBAAA,EAAA,CAAZ,CAJjB,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAAA,UAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,CAAA,CAAA;SA7IJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,cAAA,CAAA,GAAA,EAAA;EAAA,QAAA,OAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,cAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KA8JI,EAAA,SAAA,IAAA,CAAKzU,IAAL,EAAiB;QACbA,IAAI,GAAG+C,MAAM,CAAC6R,MAAP,CAAc,EAAd,EAAkB5U,IAAlB,CAAP,CAAA;EACAA,MAAAA,IAAI,CAAC8C,KAAL,GAAaC,MAAM,CAAC6R,MAAP,CAAc,EAAd,EAAkB5U,IAAI,CAAC8C,KAAvB,CAAb,CAAA;QAEAC,MAAM,CAAC4N,IAAP,CAAY3Q,IAAI,CAAC8C,KAAjB,CAAA,CAAwBtB,OAAxB,CAAgC,UAAAjD,GAAG,EAAI;EACnCyB,QAAAA,IAAI,CAAC8C,KAAL,CAAWvE,GAAX,CAAA,GAAkBwE,MAAM,CAAC6R,MAAP,CAAc,EAAd,EAAkB5U,IAAI,CAAC8C,KAAL,CAAWvE,GAAX,CAAlB,CAAlB,CAAA;SADJ,CAAA,CAAA;EAGA,MAAA,OAAOyB,IAAP,CAAA;EACH,KAAA;EAtKL,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,SAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAwKI,mBAAeA,IAAf,EAAA;EAAA,QAAA,IAAA,QAAA,EAAA,SAAA,EAAA,aAAA,CAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;kBACUqQ,QADV,GACqBzN,SAAS,CAAC0N,QAAV,CAAmB,IAAKrS,CAAAA,EAAxB,EAA4B+B,IAA5B,CADrB,CAAA;EAEU6U,gBAAAA,SAFV,GAEsB,IAAI9C,SAAJ,CAAc/R,IAAI,CAAC8C,KAAnB,CAFtB,CAAA;;kBAAA,IAISuN,QAAQ,CAAChN,OAJlB,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAKqB,KAAKyR,UAAL,CAAgBzE,QAAQ,CAAClN,GAAzB,CALrB,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAAA,UAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAOU4R,gBAAAA,aAPV,GAO0BF,SAAS,CAACG,MAAV,EAP1B,CAAA;;EAAA,gBAAA,IAAA,CASQD,aATR,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,gBAAA,OAUqB,KAAKD,UAAL,CAAgB,oBAAhB,EAAsCC,aAAtC,CAVrB,CAAA;;EAAA,cAAA,KAAA,EAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAAA,UAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAYW,IAZX,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,CAAA,CAAA;SAxKJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,QAAA,CAAA,IAAA,EAAA;EAAA,QAAA,OAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,QAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,iBAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAuLI,mBAA+B9W,EAA/B,EAAA;EAAA,QAAA,IAAA,SAAA,CAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,IACSA,EADT,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAGUgX,gBAAAA,SAHV,GAGuB,IAAKjV,CAAAA,IAAN,CAAoB8C,KAApB,CAA0B7E,EAA1B,CAHtB,CAAA;;EAAA,gBAAA,IAKSgX,SALT,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAMqB,IAAKH,CAAAA,UAAL,CAAgB,6BAAhB,CANrB,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAAA,UAAA,CAAA,IAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAQU,IAAKd,CAAAA,WAAL,CAAiBiB,SAAjB,CARV,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,gBAAA,OASU,IAAKN,CAAAA,cAAL,CAAoBM,SAApB,CATV,CAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,CAAA,CAAA;SAvLJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,gBAAA,CAAA,IAAA,EAAA;EAAA,QAAA,OAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,gBAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;EAAA,IAAA,KAAA,EAAA,YAAA;QAAA,IAmMI,mBAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,SAAA,GAAA;EAAA,QAAA,IAAA,IAAA,EAAA,CAAA,EAAA,IAAA,CAAA;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;kBACUjV,IADV,GACiB,KAAKA,IADtB,CAAA;kBAAA,UAGoBA,CAAAA,EAAAA,GAAAA,mBAAAA,EAAAA,CAAAA,IAAAA,CAAAA,IAAI,CAAC8C,KAHzB,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,IAAA,CAAA,UAAA,CAAA,EAAA,GAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;kBAGeoS,CAHf,GAAA,UAAA,CAAA,EAAA,CAAA,KAAA,CAAA;EAGkC;EACpBjW,gBAAAA,IAJd,GAIqBe,IAAI,CAAC8C,KAAL,CAAWoS,CAAX,CAJrB,CAAA;;EAAA,gBAAA,IAAA,EAMY,OAAOjW,IAAI,CAAC2U,UAAZ,KAA2B,WANvC,CAAA,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,OAOkB,IAAKI,CAAAA,WAAL,CAAiB/U,IAAjB,CAPlB,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,gBAAA,OAQkB,IAAK0V,CAAAA,cAAL,CAAoB1V,IAApB,CARlB,CAAA;;EAAA,cAAA,KAAA,EAAA;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,gBAAA,MAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,CAAA,CAAA;SAnMJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,kBAAA,GAAA;EAAA,QAAA,OAAA,mBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,kBAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAAA,YAAA;EAAA,MAAA,IAAA,QAAA,GAAA,iBAAA,eAAA,mBAAA,EAAA,CAAA,IAAA,CAgNI,mBAAmCe,IAAnC,EAAA;EAAA,QAAA,IAAA,OAAA;EAAA,YAAA,IAAA;EAAA,YAAA,IAAA;EAAA,YAAA,IAAA;EAAA,YAAA,OAAA,GAAA,SAAA,CAAA;;EAAA,QAAA,OAAA,mBAAA,EAAA,CAAA,IAAA,CAAA,SAAA,UAAA,CAAA,UAAA,EAAA;EAAA,UAAA,OAAA,CAAA,EAAA;EAAA,YAAA,QAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA;EAAA,cAAA,KAAA,CAAA;EAA+CmV,gBAAAA,OAA/C,iEAAiF,IAAjF,CAAA;;kBAAA,IACS,IAAA,CAAKC,YAAL,EADT,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAAA,gBAAA,IAES,IAAK9E,CAAAA,QAAL,CAActQ,IAAd,CAFT,EAAA;EAAA,kBAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA;EAAA,kBAAA,MAAA;EAAA,iBAAA;;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;;EAAA,cAAA,KAAA,CAAA;EAII,gBAAA,IAAA,CAAKA,IAAL,GAAY,IAAA,CAAKqV,IAAL,CAAUrV,IAAV,CAAZ,CAAA;;EAJJ,gBAAA,KAAA,IAAA,GAAA,OAAA,CAAA,MAAA,EAA0FqU,IAA1F,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;oBAA0FA,IAA1F,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA,IAAA,CAAA,CAAA;EAAA,iBAAA;;kBAKI,IAAKA,CAAAA,IAAL,GAAYA,IAAZ,CAAA;EACA,gBAAA,IAAA,CAAKK,SAAL,GAAiB,IAAI1B,GAAJ,EAAjB,CAAA;EANJ,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;EAAA,gBAAA,OAQU,IAAKsC,CAAAA,gBAAL,CAAsBH,OAAtB,CARV,CAAA;;EAAA,cAAA,KAAA,EAAA;EAAA,gBAAA,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA;kBAAA,OASU,IAAA,CAAKI,kBAAL,EATV,CAAA;;EAAA,cAAA,KAAA,EAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,MAAA,CAAA,QAAA,EAWW,IAAKlC,CAAAA,WAAL,EAAmB,GAAA,SAAnB,GAA6B,SAXxC,CAAA,CAAA;;EAAA,cAAA,KAAA,EAAA,CAAA;EAAA,cAAA,KAAA,KAAA;EAAA,gBAAA,OAAA,UAAA,CAAA,IAAA,EAAA,CAAA;EAAA,aAAA;EAAA,WAAA;EAAA,SAAA,EAAA,SAAA,EAAA,IAAA,CAAA,CAAA;SAhNJ,CAAA,CAAA,CAAA;;EAAA,MAAA,SAAA,OAAA,CAAA,IAAA,EAAA;EAAA,QAAA,OAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,OAAA;;EAAA,MAAA,OAAA,OAAA,CAAA;EAAA,KAAA,EAAA;EAAA,GAAA,CAAA,CAAA,CAAA;;EAAA,EAAA,OAAA,MAAA,CAAA;EAAA,CAAA,CAA4B7P,OAA5B;;ACSA,cAAe;EACXuP,EAAAA,MAAM,EAANA,MADW;EAEXhB,EAAAA,SAAS,EAATA,SAFW;EAGXlU,EAAAA,SAAS,EAATA,SAHW;EAIXiD,EAAAA,OAAO,EAAPA,OAJW;EAKXH,EAAAA,UAAU,EAAVA,UALW;EAMXO,EAAAA,OAAO,EAAPA,OANW;EAOXoB,EAAAA,KAAK,EAALA,KAPW;EAQXP,EAAAA,EAAE,EAAFA,EARW;EASXhE,EAAAA,IAAI,EAAJA,IATW;EAUX2R,EAAAA,UAAU,EAAVA,UAVW;EAWX4B,EAAAA,MAAM,EAANA,MAXW;EAYXG,EAAAA,MAAM,EAANA,MAAAA;EAZW,CAAf;;;;;;;;;;;;;;;;;;;;;;"}